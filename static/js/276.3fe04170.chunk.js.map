{"version":3,"file":"static/js/276.3fe04170.chunk.js","mappings":"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","sources":["../node_modules/react-country-flag/src/index.tsx","../node_modules/nuka-carousel/src/slide.tsx","../node_modules/nuka-carousel/src/hooks/use-slide-intersection-observer.ts","../node_modules/nuka-carousel/src/announce-slide.tsx","../node_modules/nuka-carousel/src/utils.ts","../node_modules/nuka-carousel/src/default-controls.tsx","../node_modules/nuka-carousel/src/slider-list.tsx","../node_modules/nuka-carousel/src/hooks/use-tween.ts","../node_modules/nuka-carousel/src/control-styles.ts","../node_modules/nuka-carousel/src/controls.tsx","../node_modules/nuka-carousel/src/default-carousel-props.tsx","../node_modules/nuka-carousel/src/hooks/use-frame-height.ts","../node_modules/nuka-carousel/src/hooks/use-state-with-ref.ts","../node_modules/nuka-carousel/src/carousel.tsx","../node_modules/nuka-carousel/src/hooks/use-forward-ref.ts"],"sourcesContent":["import * as React from 'react';\n\nconst DEFAULT_CDN_URL =\n  'https://cdn.jsdelivr.net/gh/lipis/flag-icons/flags/4x3/';\nconst DEFAULT_CDN_SUFFIX = 'svg';\n\n// offset between uppercase ascii and regional indicator symbols\nconst OFFSET = 127397;\n\ninterface EmojiProps extends React.HTMLAttributes<HTMLSpanElement> {\n  cdnSuffix?: string;\n  cdnUrl?: string;\n  countryCode: string;\n  style?: React.CSSProperties;\n  svg?: false;\n}\n\ninterface ImgProps extends React.ImgHTMLAttributes<HTMLImageElement> {\n  cdnSuffix?: string;\n  cdnUrl?: string;\n  countryCode: string;\n  style?: React.CSSProperties;\n  svg?: true;\n}\n\nexport type ReactCountryFlagProps = EmojiProps | ImgProps;\n\nexport const ReactCountryFlag = ({\n  cdnSuffix = DEFAULT_CDN_SUFFIX,\n  cdnUrl = DEFAULT_CDN_URL,\n  countryCode,\n  style,\n  svg = false,\n  ...props\n}: ReactCountryFlagProps) => {\n  if (typeof countryCode !== 'string') {\n    return null;\n  }\n\n  if (svg) {\n    const flagUrl = `${cdnUrl}${countryCode.toLowerCase()}.${cdnSuffix}`;\n\n    return (\n      <img\n        {...props}\n        src={flagUrl}\n        style={{\n          display: 'inline-block',\n          width: '1em',\n          height: '1em',\n          verticalAlign: 'middle',\n          ...style,\n        }}\n      />\n    );\n  }\n\n  const emoji = countryCode\n    .toUpperCase()\n    .replace(/./g, char => String.fromCodePoint(char.charCodeAt(0) + OFFSET));\n\n  return (\n    <span\n      role=\"img\"\n      {...props}\n      style={{\n        display: 'inline-block',\n        fontSize: '1em',\n        lineHeight: '1em',\n        verticalAlign: 'middle',\n        ...style,\n      }}\n    >\n      {emoji}\n    </span>\n  );\n};\n\nexport default ReactCountryFlag;\n","import React, {\n  CSSProperties,\n  ReactNode,\n  useRef,\n  useEffect,\n  RefObject,\n} from 'react';\nimport { useSlideIntersectionObserver } from './hooks/use-slide-intersection-observer';\n\nconst getSlideWidth = (count: number, wrapAround?: boolean): string =>\n  `${wrapAround ? 100 / (3 * count) : 100 / count}%`;\n\nconst getSlideStyles = (\n  count: number,\n  isCurrentSlide: boolean,\n  isVisibleSlide: boolean,\n  wrapAround: boolean,\n  cellSpacing: number,\n  animation: 'zoom' | 'fade' | undefined,\n  speed: number,\n  zoomScale: number | undefined,\n  adaptiveHeight: boolean,\n  initializedAdaptiveHeight: boolean,\n  slideWidth: CSSProperties['width']\n): CSSProperties => {\n  const width = slideWidth ?? getSlideWidth(count, wrapAround);\n  // const width = getSlideWidth(count, wrapAround);\n  const visibleSlideOpacity = isVisibleSlide ? 1 : 0;\n  const animationSpeed = animation === 'fade' ? 200 : 500;\n\n  let height = 'auto';\n  if (adaptiveHeight) {\n    if (initializedAdaptiveHeight) {\n      // Once adaptiveHeight is initialized, the frame will size to the height\n      // of all the visible slides\n      height = '100%';\n    } else if (isVisibleSlide) {\n      // If the slide is visible but we're still measuring heights, have\n      // visible slides just take up their natural height\n      height = 'auto';\n    } else {\n      // If the slide is not visible and we're still measuring heights, the\n      // slide should have height 0 so it doesn't contribute to the measured\n      // height of the frame\n      height = '0';\n    }\n  }\n\n  return {\n    width,\n    height,\n    padding: `0 ${cellSpacing ? cellSpacing / 2 : 0}px`,\n    transition: animation ? `${speed || animationSpeed}ms ease 0s` : undefined,\n    transform:\n      animation === 'zoom'\n        ? `scale(${isCurrentSlide && isVisibleSlide ? 1 : zoomScale || 0.85})`\n        : undefined,\n    opacity: animation === 'fade' ? visibleSlideOpacity : 1,\n  };\n};\n\nconst generateIndex = (\n  index: number,\n  count: number,\n  typeOfSlide?: 'prev-cloned' | 'next-cloned'\n): number => {\n  if (typeOfSlide === 'prev-cloned') {\n    return index - count;\n  }\n\n  if (typeOfSlide === 'next-cloned') {\n    return index + count;\n  }\n\n  return index;\n};\n\nconst Slide = ({\n  count,\n  children,\n  index,\n  isCurrentSlide,\n  typeOfSlide,\n  wrapAround,\n  cellSpacing,\n  slideWidth,\n  animation,\n  speed,\n  zoomScale,\n  onVisibleSlideHeightChange,\n  adaptiveHeight,\n  initializedAdaptiveHeight,\n  updateIOEntry,\n  id,\n  carouselRef,\n  carouselId,\n  tabbed,\n}: {\n  count: number;\n  id: string;\n  children: ReactNode | ReactNode[];\n  index: number;\n  isCurrentSlide: boolean;\n  typeOfSlide: 'prev-cloned' | 'next-cloned' | undefined;\n  wrapAround: boolean;\n  cellSpacing: number;\n  animation: 'zoom' | 'fade' | undefined;\n  speed: number;\n  zoomScale: number | undefined;\n  slideWidth?: CSSProperties['width'];\n  updateIOEntry: (id: string, isFullyVisible: boolean) => void;\n  carouselRef: RefObject<Element>;\n  /**\n   * Called with `height` when slide becomes visible and `null` when it becomes\n   * hidden.\n   */\n  onVisibleSlideHeightChange: (index: number, height: number | null) => unknown;\n  adaptiveHeight: boolean;\n  initializedAdaptiveHeight: boolean;\n  carouselId: string;\n  tabbed: boolean;\n}): JSX.Element => {\n  const customIndex = wrapAround\n    ? generateIndex(index, count, typeOfSlide)\n    : index;\n\n  const slideRef = useRef<HTMLDivElement>(null);\n\n  const entry = useSlideIntersectionObserver(slideRef, carouselRef, (entry) => {\n    updateIOEntry(id, entry?.intersectionRatio >= 0.95);\n  });\n\n  const isVisible = !!entry?.isIntersecting;\n  const isFullyVisible = (entry?.intersectionRatio ?? 1) >= 0.95;\n\n  const prevIsVisibleRef = useRef(false);\n  useEffect(() => {\n    const node = slideRef.current;\n    if (node) {\n      const slideHeight = node.getBoundingClientRect()?.height;\n\n      const prevIsVisible = prevIsVisibleRef.current;\n      if (isVisible && !prevIsVisible) {\n        onVisibleSlideHeightChange(customIndex, slideHeight);\n      } else if (!isVisible && prevIsVisible) {\n        onVisibleSlideHeightChange(customIndex, null);\n      }\n\n      prevIsVisibleRef.current = isVisible;\n    }\n  }, [customIndex, isVisible, onVisibleSlideHeightChange]);\n\n  const currentSlideClass =\n    isCurrentSlide && isFullyVisible ? ' slide-current' : '';\n\n  return (\n    <div\n      ref={slideRef}\n      {...{ inert: isFullyVisible ? undefined : 'true' }}\n      className={`slide${currentSlideClass}${\n        typeOfSlide ? ` ${typeOfSlide}` : ''\n      }${isFullyVisible ? ' slide-visible' : ''}`}\n      style={getSlideStyles(\n        count,\n        isCurrentSlide,\n        isFullyVisible,\n        wrapAround,\n        cellSpacing,\n        animation,\n        speed,\n        zoomScale,\n        adaptiveHeight,\n        initializedAdaptiveHeight,\n        slideWidth\n      )}\n      id={typeOfSlide ? undefined : `${carouselId}-slide-${index + 1}`}\n      role={tabbed ? 'tabpanel' : 'group'}\n      aria-roledescription={tabbed ? undefined : 'slide'}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default Slide;\n","import { RefObject, useEffect, useRef, useState } from 'react';\n\nexport const useSlideIntersectionObserver = (\n  elementRef: RefObject<Element>,\n  rootRef: RefObject<Element>,\n  callback: (entry: IntersectionObserverEntry) => void\n) => {\n  const [entry, setEntry] = useState<IntersectionObserverEntry>();\n  const callbackRef = useRef(callback);\n\n  useEffect(() => {\n    callbackRef.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    const node = elementRef?.current;\n    const root = rootRef?.current;\n\n    if (!window.IntersectionObserver || !node || !root) return;\n\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => {\n          setEntry(entry);\n          callbackRef.current(entry);\n        });\n      },\n      {\n        threshold: [0.05, 0.95],\n        root,\n      }\n    );\n\n    observer.observe(node);\n\n    return () => observer.disconnect();\n  }, [elementRef, rootRef]);\n\n  return entry;\n};\n","import React, { AriaAttributes, CSSProperties } from 'react';\n\nconst styles: CSSProperties = {\n  position: 'absolute',\n  width: '1px',\n  height: '1px',\n  overflow: 'hidden',\n  padding: 0,\n  margin: '-1px',\n  clip: 'rect(0, 0, 0, 0)',\n  whiteSpace: 'nowrap',\n  border: 0,\n};\n\nconst AnnounceSlide = ({\n  message,\n  ariaLive = 'polite',\n}: {\n  message: string;\n  ariaLive: AriaAttributes['aria-live'];\n}): React.ReactElement => (\n  <div aria-live={ariaLive} aria-atomic=\"true\" style={styles} tabIndex={-1}>\n    {message}\n  </div>\n);\n\nexport const defaultRenderAnnounceSlideMessage = ({\n  currentSlide,\n  count,\n}: {\n  currentSlide: number;\n  count: number;\n}): string => `Slide ${currentSlide + 1} of ${count}`;\n\nexport default AnnounceSlide;\n","import { getDotIndexes } from './default-controls';\nimport { CellAlign, ScrollMode } from './types';\n\nexport const getNextMoveIndex = (\n  scrollMode: ScrollMode,\n  wrapAround: boolean,\n  currentSlide: number,\n  slideCount: number,\n  slidesToScroll: number,\n  slidesToShow: number,\n  cellAlign: CellAlign\n) => {\n  if (wrapAround) {\n    return currentSlide + slidesToScroll;\n  }\n  // Quit early if we're already as far right as we can go\n  if (\n    currentSlide >= slideCount - 1 ||\n    (cellAlign === 'left' && currentSlide >= slideCount - slidesToShow)\n  ) {\n    return currentSlide;\n  }\n\n  if (scrollMode === ScrollMode.remainder && cellAlign === 'left') {\n    return Math.min(currentSlide + slidesToScroll, slideCount - slidesToShow);\n  }\n\n  return Math.min(currentSlide + slidesToScroll, slideCount - 1);\n};\n\nexport const getPrevMoveIndex = (\n  scrollMode: ScrollMode,\n  wrapAround: boolean,\n  currentSlide: number,\n  slidesToScroll: number,\n  slidesToShow: number,\n  cellAlign: CellAlign\n) => {\n  if (wrapAround) {\n    return currentSlide - slidesToScroll;\n  }\n\n  // Quit early if we're already as far left as we can go\n  if (\n    currentSlide <= 0 ||\n    (cellAlign === 'right' && currentSlide <= slidesToShow - 1)\n  ) {\n    return currentSlide;\n  }\n\n  if (scrollMode === ScrollMode.remainder && cellAlign === 'right') {\n    return Math.max(currentSlide - slidesToScroll, slidesToShow - 1);\n  }\n\n  return Math.max(currentSlide - slidesToScroll, 0);\n};\n\nexport const getDefaultSlideIndex = (\n  slideIndex: number | undefined,\n  slideCount: number,\n  slidesToShow: number,\n  slidesToScroll: number,\n  cellAlign: CellAlign,\n  autoplayReverse: boolean,\n  scrollMode: ScrollMode\n) => {\n  if (slideIndex !== undefined) {\n    return slideIndex;\n  }\n\n  const dotIndexes = getDotIndexes(\n    slideCount,\n    slidesToScroll,\n    scrollMode,\n    slidesToShow,\n    false,\n    cellAlign\n  );\n\n  return autoplayReverse ? dotIndexes[dotIndexes.length - 1] : dotIndexes[0];\n};\n\n/**\n * Boils down an unbounded index (-Infinity < index < Infinity) to a bounded one\n * (0 ≤ index < slideCount)\n */\nexport const getBoundedIndex = (rawIndex: number, slideCount: number) => {\n  return ((rawIndex % slideCount) + slideCount) % slideCount;\n};\n","import React, { CSSProperties, useCallback } from 'react';\nimport { CellAlign, ControlProps, ScrollMode } from './types';\nimport { getBoundedIndex } from './utils';\n\nconst defaultButtonStyles = (disabled: boolean): CSSProperties => ({\n  border: 0,\n  background: 'rgba(0,0,0,0.4)',\n  color: 'white',\n  padding: 10,\n  textTransform: 'uppercase',\n  opacity: disabled ? 0.3 : 1,\n  cursor: disabled ? 'not-allowed' : 'pointer',\n});\n\nexport const prevButtonDisabled = ({\n  cellAlign,\n  currentSlide,\n  slidesToShow,\n  wrapAround,\n}: Pick<\n  ControlProps,\n  'cellAlign' | 'currentSlide' | 'slidesToShow' | 'wrapAround'\n>) => {\n  // inifite carousel\n  if (wrapAround) {\n    return false;\n  }\n\n  // disable if displaying the leftmost slide\n  if (currentSlide === 0) {\n    return true;\n  }\n\n  // remainder scroll mode\n  if (cellAlign === 'right' && currentSlide <= slidesToShow - 1) {\n    return true;\n  }\n\n  return false;\n};\n\nexport const PreviousButton = ({\n  previousSlide,\n  defaultControlsConfig: {\n    prevButtonClassName,\n    prevButtonStyle = {},\n    prevButtonText,\n    prevButtonOnClick,\n  },\n  onUserNavigation,\n  carouselId,\n  previousDisabled: disabled,\n}: ControlProps) => {\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    prevButtonOnClick?.(event);\n    if (event.defaultPrevented) return;\n\n    onUserNavigation(event);\n\n    event.preventDefault();\n    previousSlide();\n  };\n\n  return (\n    <button\n      className={prevButtonClassName}\n      style={{\n        ...defaultButtonStyles(disabled),\n        ...prevButtonStyle,\n      }}\n      disabled={disabled}\n      onClick={handleClick}\n      aria-label=\"previous\"\n      aria-controls={`${carouselId}-slider-frame`}\n      type=\"button\"\n    >\n      {prevButtonText || 'Prev'}\n    </button>\n  );\n};\n\nexport const nextButtonDisabled = ({\n  cellAlign,\n  currentSlide,\n  slideCount,\n  slidesToShow,\n  wrapAround,\n}: Pick<\n  ControlProps,\n  'cellAlign' | 'currentSlide' | 'slideCount' | 'slidesToShow' | 'wrapAround'\n>) => {\n  // inifite carousel\n  if (wrapAround) {\n    return false;\n  }\n\n  // If we are at the last possible slide without wrap, disable\n  if (currentSlide >= slideCount - 1) {\n    return true;\n  }\n\n  // remainder scroll mode\n  if (cellAlign === 'left' && currentSlide >= slideCount - slidesToShow) {\n    return true;\n  }\n\n  return false;\n};\n\nexport const NextButton = ({\n  nextSlide,\n  defaultControlsConfig: {\n    nextButtonClassName,\n    nextButtonStyle = {},\n    nextButtonText,\n    nextButtonOnClick,\n  },\n  carouselId,\n  nextDisabled: disabled,\n  onUserNavigation,\n}: ControlProps) => {\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    nextButtonOnClick?.(event);\n    if (event.defaultPrevented) return;\n\n    onUserNavigation(event);\n\n    event.preventDefault();\n    nextSlide();\n  };\n\n  return (\n    <button\n      className={nextButtonClassName}\n      style={{\n        ...defaultButtonStyles(disabled),\n        ...nextButtonStyle,\n      }}\n      disabled={disabled}\n      onClick={handleClick}\n      aria-label=\"next\"\n      aria-controls={`${carouselId}-slider-frame`}\n      type=\"button\"\n    >\n      {nextButtonText || 'Next'}\n    </button>\n  );\n};\n\n/**\n * Calculate the indices that each dot will jump to when clicked\n */\nexport const getDotIndexes = (\n  slideCount: number,\n  slidesToScroll: number,\n  scrollMode: ScrollMode,\n  slidesToShow: number,\n  wrapAround: boolean,\n  cellAlign: CellAlign\n) => {\n  const dotIndexes: number[] = [];\n  const scrollSlides = slidesToScroll <= 0 ? 1 : slidesToScroll;\n\n  if (wrapAround) {\n    for (let i = 0; i < slideCount; i += scrollSlides) {\n      dotIndexes.push(i);\n    }\n\n    return dotIndexes;\n  }\n\n  if (cellAlign === 'center') {\n    for (let i = 0; i < slideCount - 1; i += scrollSlides) {\n      dotIndexes.push(i);\n    }\n\n    if (slideCount > 0) {\n      dotIndexes.push(slideCount - 1);\n    }\n\n    return dotIndexes;\n  }\n\n  if (cellAlign === 'left') {\n    if (slidesToShow >= slideCount) {\n      return [0];\n    }\n\n    const lastPossibleIndexWithoutWhitespace = slideCount - slidesToShow;\n\n    for (let i = 0; i < lastPossibleIndexWithoutWhitespace; i += scrollSlides) {\n      dotIndexes.push(i);\n    }\n\n    if (scrollMode === ScrollMode.remainder) {\n      dotIndexes.push(lastPossibleIndexWithoutWhitespace);\n    } else {\n      dotIndexes.push(dotIndexes[dotIndexes.length - 1] + scrollSlides);\n    }\n\n    return dotIndexes;\n  }\n\n  if (cellAlign === 'right') {\n    if (slidesToShow >= slideCount) {\n      return [slideCount - 1];\n    }\n\n    const firstPossibleIndexWithoutWhitespace = slidesToShow - 1;\n\n    if (scrollMode === ScrollMode.remainder) {\n      for (\n        let i = firstPossibleIndexWithoutWhitespace;\n        i < slideCount - 1;\n        i += scrollSlides\n      ) {\n        dotIndexes.push(i);\n      }\n      dotIndexes.push(slideCount - 1);\n    } else {\n      for (\n        let i = slideCount - 1;\n        i > firstPossibleIndexWithoutWhitespace;\n        i -= scrollSlides\n      ) {\n        dotIndexes.push(i);\n      }\n      dotIndexes.push(dotIndexes[dotIndexes.length - 1] - scrollSlides);\n\n      dotIndexes.reverse();\n    }\n\n    return dotIndexes;\n  }\n\n  // We should never reach this, because the if statements above cover all\n  // possible values of cellAlign\n  return dotIndexes;\n};\n\nexport const PagingDots = ({\n  pagingDotsIndices,\n  defaultControlsConfig: {\n    pagingDotsContainerClassName,\n    pagingDotsClassName,\n    pagingDotsStyle = {},\n    pagingDotsOnClick,\n  },\n  carouselId,\n  currentSlide,\n  onUserNavigation,\n  slideCount,\n  goToSlide,\n  tabbed,\n}: ControlProps) => {\n  const listStyles: CSSProperties = {\n    position: 'relative',\n    top: -10,\n    display: 'flex',\n    margin: 0,\n    padding: 0,\n    listStyleType: 'none',\n  };\n\n  const getButtonStyles = useCallback(\n    (active: boolean) => ({\n      cursor: 'pointer',\n      opacity: active ? 1 : 0.5,\n      background: 'transparent',\n      border: 'none',\n      fill: 'black',\n    }),\n    []\n  );\n  const currentSlideBounded = getBoundedIndex(currentSlide, slideCount);\n\n  if (!tabbed) return null;\n\n  return (\n    <div\n      className={pagingDotsContainerClassName}\n      style={listStyles}\n      role=\"tablist\"\n      aria-label=\"Choose slide to display.\"\n    >\n      {pagingDotsIndices.map((slideIndex, i) => {\n        const isActive =\n          currentSlideBounded === slideIndex ||\n          // sets navigation dots active if the current slide falls in the current index range\n          (currentSlideBounded < slideIndex &&\n            (i === 0 || currentSlideBounded > pagingDotsIndices[i - 1]));\n\n        return (\n          <button\n            key={slideIndex}\n            className={[\n              'paging-item',\n              pagingDotsClassName,\n              isActive ? 'active' : null,\n            ].join(' ')}\n            type=\"button\"\n            style={{\n              ...getButtonStyles(isActive),\n              ...pagingDotsStyle,\n            }}\n            onClick={(event) => {\n              pagingDotsOnClick?.(event);\n              if (event.defaultPrevented) return;\n\n              onUserNavigation(event);\n\n              goToSlide(slideIndex);\n            }}\n            aria-label={`slide ${slideIndex + 1}`}\n            aria-selected={isActive}\n            aria-controls={`${carouselId}-slide-${slideIndex + 1}`}\n            role=\"tab\"\n          >\n            <svg\n              className=\"paging-dot\"\n              width=\"6\"\n              height=\"6\"\n              aria-hidden=\"true\"\n              focusable=\"false\"\n              viewBox=\"0 0 6 6\"\n            >\n              <circle cx=\"3\" cy=\"3\" r=\"3\" />\n            </svg>\n          </button>\n        );\n      })}\n    </div>\n  );\n};\n","import React, { ReactNode, useEffect } from 'react';\nimport { getDotIndexes } from './default-controls';\nimport { useTween } from './hooks/use-tween';\nimport { CellAlign, InternalCarouselProps } from './types';\n\nexport const getPercentOffsetForSlide = (\n  currentSlide: number,\n  slideCount: number,\n  slidesToShow: number,\n  cellAlign: CellAlign,\n  wrapAround: boolean\n): number => {\n  // When wrapAround is enabled, we show the slides 3 times\n  const renderedSlideCount = wrapAround ? 3 * slideCount : slideCount;\n\n  const singleSlidePercentOfWhole = 100 / renderedSlideCount;\n\n  // When wrap is on, -33.33% puts us right on the center, true set of slides\n  // (the left and right sets are clones meant to avoid visual gaps)\n  let slide0Offset = wrapAround ? -100 / 3 : 0;\n\n  if (cellAlign === 'right' && slidesToShow > 1) {\n    const excessSlides = slidesToShow - 1;\n    slide0Offset += singleSlidePercentOfWhole * excessSlides;\n  }\n\n  if (cellAlign === 'center' && slidesToShow > 1) {\n    const excessSlides = slidesToShow - 1;\n    // Half of excess is on left and half is on right when centered\n    const excessLeftSlides = excessSlides / 2;\n    slide0Offset += singleSlidePercentOfWhole * excessLeftSlides;\n  }\n\n  const currentSlideOffsetFrom0 = (100 / renderedSlideCount) * currentSlide;\n\n  return slide0Offset - currentSlideOffsetFrom0;\n};\n\ninterface SliderListProps\n  extends Pick<\n    InternalCarouselProps,\n    | 'cellAlign'\n    | 'disableAnimation'\n    | 'disableEdgeSwiping'\n    | 'easing'\n    | 'edgeEasing'\n    | 'scrollMode'\n    | 'animation'\n    | 'slidesToShow'\n    | 'slideWidth'\n    | 'speed'\n    | 'wrapAround'\n  > {\n  slidesToScroll: number;\n  animationDistance: number;\n  children: ReactNode;\n  currentSlide: number;\n  draggedOffset: number;\n  isDragging: boolean;\n  slideCount: number;\n  setIsAnimating: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport const SliderList = React.forwardRef<HTMLDivElement, SliderListProps>(\n  (\n    {\n      animation,\n      animationDistance,\n      cellAlign,\n      children,\n      currentSlide,\n      disableAnimation,\n      disableEdgeSwiping,\n      draggedOffset,\n      easing,\n      edgeEasing,\n      isDragging,\n      scrollMode,\n      slideCount,\n      slidesToScroll,\n      slidesToShow,\n      speed,\n      wrapAround,\n      slideWidth,\n      setIsAnimating,\n    },\n    forwardedRef\n  ) => {\n    // When wrapAround is enabled, we show the slides 3 times\n    const renderedSlideCount = wrapAround ? 3 * slideCount : slideCount;\n\n    const listVisibleWidth = slideWidth\n      ? `calc(${slideWidth} * ${renderedSlideCount})`\n      : `${(renderedSlideCount * 100) / slidesToShow}%`;\n\n    const percentOffsetForSlideProps = [\n      slideCount,\n      slidesToShow,\n      cellAlign,\n      wrapAround,\n    ] as const;\n\n    // We recycle dot index generation to determine the leftmost and rightmost\n    // indices used, to be used in calculating the x-translation values we need\n    // to limit to or when edgeEasing should be used.\n    const dotIndexes = getDotIndexes(\n      slideCount,\n      slidesToScroll,\n      scrollMode,\n      slidesToShow,\n      wrapAround,\n      cellAlign\n    );\n\n    let clampedDraggedOffset = `${draggedOffset}px`;\n    if (isDragging && disableEdgeSwiping && !wrapAround) {\n      const clampOffsets = [\n        dotIndexes[0],\n        dotIndexes[dotIndexes.length - 1],\n      ].map((index) =>\n        getPercentOffsetForSlide(index, ...percentOffsetForSlideProps)\n      );\n      // Offsets are seemingly backwards because the rightmost slide creates\n      // the most negative translate value\n      clampedDraggedOffset = `clamp(${clampOffsets[1]}%, ${draggedOffset}px, ${clampOffsets[0]}%)`;\n    }\n\n    const slideBasedOffset = getPercentOffsetForSlide(\n      currentSlide,\n      ...percentOffsetForSlideProps\n    );\n\n    const isEdgeEasing =\n      !disableEdgeSwiping &&\n      !wrapAround &&\n      ((currentSlide === dotIndexes[0] && animationDistance < 0) ||\n        (currentSlide === dotIndexes[dotIndexes.length - 1] &&\n          animationDistance > 0));\n    const { value: transition, isAnimating } = useTween(\n      speed,\n      !isEdgeEasing ? easing : edgeEasing,\n      // animationDistance is assumed to be unique enough that it can be used to\n      // detect when a new animation should start. This is used in addition to\n      // currentSlide because some animations, such as those with edgeEasing, do\n      // not occur due to a change in value of currentSlide\n      currentSlide + animationDistance,\n      isDragging || disableAnimation || animation === 'fade'\n    );\n\n    // Return undefined if the transform would be 0 pixels since transforms can\n    // cause flickering in chrome.\n    let positioning: string | undefined;\n    if (isDragging || slideBasedOffset !== 0 || isAnimating) {\n      if (isDragging) {\n        positioning = `translateX(${clampedDraggedOffset})`;\n      } else {\n        const transitionOffset = isAnimating\n          ? (1 - transition) * animationDistance\n          : 0;\n        positioning = `translateX(calc(${slideBasedOffset}% - ${transitionOffset}px))`;\n      }\n    }\n\n    useEffect(() => {\n      setIsAnimating(isAnimating);\n    }, [isAnimating, setIsAnimating]);\n\n    return (\n      <div\n        ref={forwardedRef}\n        className=\"slider-list\"\n        style={{\n          width: listVisibleWidth,\n          textAlign: 'left',\n          userSelect: 'auto',\n          transform: positioning,\n          display: 'flex',\n        }}\n      >\n        {children}\n      </div>\n    );\n  }\n);\n\nSliderList.displayName = 'SliderList';\n","import { useEffect, useState, useRef } from 'react';\nimport { EasingFunction } from 'src/types';\n\n/**\n * Provides an interpolated value, beginning at 0 and ending at 1, based on a\n * provided duration and animation timing function.\n */\nexport const useTween = (\n  durationMs: number,\n  easingFunction: EasingFunction,\n  // navigationNum is an combination of numbers that are stable when the\n  // animation should not be running or should continue running, but change when\n  // the animation should start running. In practice, this is a combination of\n  // the animation distance and slide index.\n  navigationNum: number,\n  shouldInterrupt: boolean\n) => {\n  const [normalizedTimeRaw, setNormalizedTime] = useState(1);\n  const startTime = useRef(Date.now());\n  const rAF = useRef<number | undefined>();\n  const isFirstRender = useRef(true);\n  const lastNavigationNum = useRef<number | null>(null);\n\n  // Detect on the first render following navigation if the animation should\n  // be running. If we wait for the useEffect, the first render will flash with\n  // the slide in its destination position, before the animation triggers,\n  // sending it back to the position of the first frame of the animation. This\n  // approach is done in place of a useLayoutEffect, which has issues with SSR.\n  const normalizedTime =\n    lastNavigationNum.current === null ||\n    lastNavigationNum.current === navigationNum ||\n    shouldInterrupt\n      ? normalizedTimeRaw\n      : 0; // 0 here indicates the animation has begun\n\n  useEffect(() => {\n    lastNavigationNum.current = navigationNum;\n\n    // Skip the first render as we don't want to trigger the animation right off\n    // the bat\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n\n    if (shouldInterrupt) {\n      return;\n    }\n\n    startTime.current = Date.now();\n    setNormalizedTime(0);\n\n    const tick = () => {\n      rAF.current = requestAnimationFrame(() => {\n        const currentTime = Date.now();\n        const normalizedTime = Math.min(\n          1,\n          (currentTime - startTime.current) / durationMs\n        );\n        setNormalizedTime(normalizedTime);\n\n        if (normalizedTime < 1) {\n          tick();\n        } else {\n          // Clean up so we can use this value to determine if the most recent\n          // animation completed\n          rAF.current = undefined;\n        }\n      });\n    };\n    tick();\n\n    return () => {\n      // If the most recent animation did not complete, cut it short and reset\n      // the animation\n      if (rAF.current !== undefined) {\n        cancelAnimationFrame(rAF.current);\n        setNormalizedTime(1);\n      }\n    };\n  }, [navigationNum, durationMs, shouldInterrupt]);\n\n  return {\n    isAnimating: normalizedTime !== 1,\n    value: easingFunction(normalizedTime),\n  };\n};\n","import { CSSProperties } from 'react';\nimport { Positions } from './types';\n\nconst commonStyles: CSSProperties = {\n  position: 'absolute',\n  display: 'flex',\n  zIndex: 1,\n  top: 0,\n  left: 0,\n  bottom: 0,\n  right: 0,\n};\n\n/**\n * Gets flexbox alignment and justify-content styles for a given position.\n */\nconst getControlContainerFlexStyles = (pos: Positions): CSSProperties => {\n  let alignItems: CSSProperties['alignItems'];\n\n  switch (pos) {\n    case Positions.TopLeft:\n    case Positions.TopCenter:\n    case Positions.TopRight:\n      alignItems = 'flex-start';\n      break;\n    case Positions.CenterLeft:\n    case Positions.CenterCenter:\n    case Positions.CenterRight:\n      alignItems = 'center';\n      break;\n    case Positions.BottomLeft:\n    case Positions.BottomCenter:\n    case Positions.BottomRight:\n      alignItems = 'flex-end';\n      break;\n  }\n\n  let justifyContent: CSSProperties['justifyContent'];\n  switch (pos) {\n    case Positions.TopLeft:\n    case Positions.CenterLeft:\n    case Positions.BottomLeft:\n      justifyContent = 'flex-start';\n      break;\n    case Positions.TopCenter:\n    case Positions.CenterCenter:\n    case Positions.BottomCenter:\n      justifyContent = 'center';\n      break;\n    case Positions.TopRight:\n    case Positions.CenterRight:\n    case Positions.BottomRight:\n      justifyContent = 'flex-end';\n      break;\n  }\n\n  return { alignItems, justifyContent };\n};\n\n/**\n * Gets the styles for a back/forward control container to align the control\n * properly within the parent.\n */\nexport const getControlContainerStyles = (pos: Positions): CSSProperties => {\n  return { ...getControlContainerFlexStyles(pos), ...commonStyles };\n};\n","import React, { Fragment } from 'react';\nimport { getControlContainerStyles } from './control-styles';\nimport {\n  getDotIndexes,\n  nextButtonDisabled,\n  prevButtonDisabled,\n} from './default-controls';\nimport {\n  InternalCarouselProps,\n  Positions,\n  RenderControlFunctionNames,\n} from './types';\n\ntype ControlMap = { funcName: RenderControlFunctionNames; key: Positions }[];\nconst controlsMap: ControlMap = [\n  { funcName: 'renderTopLeftControls', key: Positions.TopLeft },\n  { funcName: 'renderTopCenterControls', key: Positions.TopCenter },\n  { funcName: 'renderTopRightControls', key: Positions.TopRight },\n  { funcName: 'renderCenterLeftControls', key: Positions.CenterLeft },\n  { funcName: 'renderCenterCenterControls', key: Positions.CenterCenter },\n  { funcName: 'renderCenterRightControls', key: Positions.CenterRight },\n  { funcName: 'renderBottomLeftControls', key: Positions.BottomLeft },\n  { funcName: 'renderBottomCenterControls', key: Positions.BottomCenter },\n  { funcName: 'renderBottomRightControls', key: Positions.BottomRight },\n];\n\nconst renderControls = (\n  props: InternalCarouselProps,\n  slideCount: number,\n  currentSlide: number,\n  goToSlide: (targetSlideIndex: number) => void,\n  nextSlide: () => void,\n  prevSlide: () => void,\n  slidesToScroll: number\n): React.ReactElement[] | null => {\n  if (props.withoutControls) {\n    return null;\n  }\n\n  const disableCheckProps = {\n    ...props,\n    currentSlide,\n    slideCount,\n  };\n  const nextDisabled = nextButtonDisabled(disableCheckProps);\n  const previousDisabled = prevButtonDisabled(disableCheckProps);\n  const pagingDotsIndices = getDotIndexes(\n    slideCount,\n    slidesToScroll,\n    props.scrollMode,\n    props.slidesToShow,\n    props.wrapAround,\n    props.cellAlign\n  );\n\n  return controlsMap.map((control) => {\n    if (\n      !props[control.funcName] ||\n      typeof props[control.funcName] !== 'function'\n    ) {\n      return <Fragment key={control.funcName} />;\n    }\n    return (\n      <div\n        key={control.funcName}\n        style={{\n          ...getControlContainerStyles(control.key),\n          pointerEvents: 'none',\n        }}\n      >\n        <div\n          className={[\n            `slider-control-${control.key.toLowerCase()}`,\n            props.defaultControlsConfig.containerClassName || '',\n          ]\n            .join(' ')\n            .trim()}\n          // The container has `pointerEvents: 'none'` so we need to override\n          // that to make sure the controls are clickable.\n          style={{ pointerEvents: 'auto' }}\n        >\n          {props[control.funcName]?.({\n            cellAlign: props.cellAlign,\n            cellSpacing: props.cellSpacing,\n            currentSlide,\n            defaultControlsConfig: props.defaultControlsConfig || {},\n            carouselId: props.carouselId,\n            pagingDotsIndices,\n            goToSlide,\n            nextDisabled,\n            nextSlide,\n            onUserNavigation: props.onUserNavigation,\n            previousDisabled,\n            previousSlide: prevSlide,\n            scrollMode: props.scrollMode,\n            slideCount,\n            slidesToScroll,\n            slidesToShow: props.slidesToShow || 1,\n            tabbed: props.tabbed,\n            vertical: props.vertical,\n            wrapAround: props.wrapAround,\n          })}\n        </div>\n      </div>\n    );\n  });\n};\n\nexport default renderControls;\n","import React from 'react';\nimport { InternalCarouselProps, ControlProps, ScrollMode } from './types';\nimport { NextButton, PagingDots, PreviousButton } from './default-controls';\nimport { defaultRenderAnnounceSlideMessage } from './announce-slide';\n\nconst easeOut = (t: number) => (t - 1) ** 3 + 1;\n\nconst defaultProps: InternalCarouselProps = {\n  adaptiveHeight: false,\n  adaptiveHeightAnimation: true,\n  afterSlide: () => {\n    // do nothing\n  },\n  autoplay: false,\n  autoplayInterval: 3000,\n  autoplayReverse: false,\n  beforeSlide: () => {\n    // do nothing\n  },\n  cellAlign: 'left',\n  cellSpacing: 0,\n  defaultControlsConfig: {},\n  disableAnimation: false,\n  disableEdgeSwiping: false,\n  dragging: true,\n  dragThreshold: 0.5,\n  easing: easeOut,\n  edgeEasing: easeOut,\n  enableKeyboardControls: false,\n  frameAriaLabel: 'Slider',\n  keyCodeConfig: {\n    nextSlide: [39, 68, 38, 87],\n    previousSlide: [37, 65, 40, 83],\n    firstSlide: [81],\n    lastSlide: [69],\n    pause: [32],\n  },\n  landmark: false,\n  onDragStart: () => {\n    // do nothing\n  },\n  onDrag: () => {\n    // do nothing\n  },\n  onDragEnd: () => {\n    // do nothing\n  },\n  onUserNavigation: () => {\n    // do nothing\n  },\n  pauseOnHover: true,\n  renderAnnounceSlideMessage: defaultRenderAnnounceSlideMessage,\n  renderBottomCenterControls: (props: ControlProps) => (\n    <PagingDots {...props} />\n  ),\n  renderCenterLeftControls: (props: ControlProps) => (\n    <PreviousButton {...props} />\n  ),\n  renderCenterRightControls: (props: ControlProps) => <NextButton {...props} />,\n  scrollMode: ScrollMode.page,\n  slidesToScroll: 1,\n  slidesToShow: 1,\n  speed: 500,\n  style: {},\n  swiping: true,\n  tabbed: true,\n  vertical: false,\n  withoutControls: false,\n  wrapAround: false,\n  children: <></>,\n};\n\nexport default defaultProps;\n","import { SlideHeight } from '../types';\nimport { useCallback, useMemo, useState } from 'react';\nimport { useStateWithRef } from './use-state-with-ref';\n\n/**\n * The frame height is normally, just `auto` (i.e., it expands to fit the\n * items), but in adaptiveHeight mode, it's the height of the tallest visible\n * item.\n *\n * In adaptiveHeight mode, we also switch between two states to ensure that\n * slides don't render with zero height when server-side-rendering:\n *\n * - When initializedAdaptiveHeight is false: the frame has height auto; visible\n *   slides have height auto; invisible slides have height 0\n * - The client sets initializedAdaptiveHeight to true once we've measured all\n *   the visible slides' heights\n * - When initializedAdaptiveHeight is true: the frame has height set to the\n *   tallest visible slide; all slides have height 100%\n */\nexport const useFrameHeight = (\n  adaptiveHeight: boolean,\n  slidesToShow: number,\n  slideCount: number\n): {\n  /**\n   * Callback that can be passed to Slides to allow them to update the\n   * `visibleHeights` variable.\n   */\n  handleVisibleSlideHeightChange: (\n    slideIndex: number,\n    height: number | null\n  ) => unknown;\n\n  /** CSS height of the frame container */\n  frameHeight: string;\n\n  /**\n   * Whether we'd measured the initial slide heights and are ready for the\n   * frame to control the children's height, rather than the other way around.\n   */\n  initializedAdaptiveHeight: boolean;\n} => {\n  const [visibleHeights, setVisibleHeights, visibleHeightsRef] =\n    useStateWithRef<SlideHeight[]>([]);\n\n  // Whether we've received heights of all initial visible heights\n  const [initializedAdaptiveHeight, setInitializedAdaptiveHeight] =\n    useState(false);\n\n  const handleVisibleSlideHeightChange = useCallback(\n    (slideIndex: number, height: number | null) => {\n      // Use the ref's value since it's always the latest value\n      const latestVisibleHeights = visibleHeightsRef.current;\n      let newVisibleHeights: SlideHeight[];\n      if (height === null) {\n        newVisibleHeights = latestVisibleHeights.filter(\n          (slideHeight) => slideHeight.slideIndex !== slideIndex\n        );\n      } else {\n        newVisibleHeights = [...latestVisibleHeights, { slideIndex, height }];\n      }\n      setVisibleHeights(newVisibleHeights);\n\n      if (\n        newVisibleHeights.length >=\n        Math.min(slideCount, Math.ceil(slidesToShow))\n      ) {\n        setInitializedAdaptiveHeight(true);\n      }\n    },\n    [slideCount, setVisibleHeights, slidesToShow, visibleHeightsRef]\n  );\n\n  const frameHeight = useMemo(() => {\n    if (adaptiveHeight) {\n      // We want server-side-rendering to render the carousel with non-zero\n      // height. to achieve this, we first set the height to `auto` until\n      // we've received the heights of the visible slides. Then, we switch to\n      // a mode where the frame controls the height.\n      if (!initializedAdaptiveHeight) {\n        return 'auto';\n      }\n\n      const maxHeight = Math.max(\n        0,\n        ...visibleHeights.map((height) => height.height)\n      );\n      return `${maxHeight}px`;\n    } else {\n      return 'auto';\n    }\n  }, [adaptiveHeight, initializedAdaptiveHeight, visibleHeights]);\n\n  return {\n    handleVisibleSlideHeightChange,\n    frameHeight,\n    initializedAdaptiveHeight,\n  };\n};\n","import { MutableRefObject, useCallback, useRef, useState } from 'react';\n\n/**\n * Like useState, but also returns a ref that's always instantly updated.\n *\n * This is useful in two cases:\n *\n * 1. You need to both force a re-render when a variable changes, and\n *    also avoid re-running side effects (for example, a network call), even\n *    before the state fully updates for the component.\n * 2. Multiple callbacks need to modify the same object or array before the\n *    state updates. For example, if one callback tries to append 4 to\n *    `[1, 2, 3]` and another tries to append 5, we may end up with only\n *    `[1, 2, 3, 5]` instead of `[1, 2, 3, 4, 5]`\n */\nexport const useStateWithRef = <S>(\n  initialState: S\n): [S, (newValue: S) => void, MutableRefObject<S>] => {\n  const [value, setValue] = useState(initialState);\n  // Need to explicitly type this out, or the overloads can confuse the\n  // compiler to think that this might be a React Component ref\n  const valueRef = useRef<S>(initialState) as MutableRefObject<S>;\n\n  const setValueAndRef = useCallback((newValue: S) => {\n    valueRef.current = newValue;\n    setValue(newValue);\n  }, []);\n\n  return [value, setValueAndRef, valueRef];\n};\n","import React, { useEffect, useState, useRef, useCallback, useId } from 'react';\nimport Slide from './slide';\nimport AnnounceSlide from './announce-slide';\nimport { getPercentOffsetForSlide, SliderList } from './slider-list';\nimport {\n  CarouselProps,\n  CellAlign,\n  InternalCarouselProps,\n  KeyCodeConfig,\n  KeyCodeFunction,\n  ScrollMode,\n} from './types';\nimport renderControls from './controls';\nimport defaultProps from './default-carousel-props';\nimport {\n  getNextMoveIndex,\n  getPrevMoveIndex,\n  getDefaultSlideIndex,\n  getBoundedIndex,\n} from './utils';\nimport { useFrameHeight } from './hooks/use-frame-height';\nimport { getDotIndexes } from './default-controls';\nimport { useForwardRef } from './hooks/use-forward-ref';\n\nexport const Carousel = React.forwardRef<HTMLDivElement, CarouselProps>(\n  (rawProps, ref): React.ReactElement => {\n    /**\n     * We need this cast because we want the component's properties to seem\n     * optional to external users, but always-present for the internal\n     * implementation.\n     *\n     * This cast is safe due to the `Carousel.defaultProps = defaultProps;`\n     * statement below. That guarantees all the properties are present, since\n     * `defaultProps` has type `InternalCarouselProps`.\n     */\n    const props = rawProps as InternalCarouselProps;\n    const internalCarouselId = useId();\n\n    const {\n      adaptiveHeight,\n      adaptiveHeightAnimation,\n      afterSlide,\n      animation,\n      autoplay,\n      autoplayInterval,\n      autoplayReverse,\n      beforeSlide,\n      carouselId = internalCarouselId,\n      cellAlign: propsCellAlign,\n      cellSpacing,\n      children,\n      className,\n      disableAnimation,\n      dragging: desktopDraggingEnabled,\n      dragThreshold: propsDragThreshold,\n      enableKeyboardControls,\n      frameAriaLabel,\n      keyCodeConfig,\n      landmark,\n      onDrag,\n      onDragEnd,\n      onDragStart,\n      onUserNavigation,\n      pauseOnHover,\n      renderAnnounceSlideMessage,\n      scrollMode: propsScrollMode,\n      slideIndex,\n      slidesToScroll: propsSlidesToScroll,\n      slidesToShow: propsSlidesToShow,\n      slideWidth,\n      speed,\n      style,\n      swiping: mobileDraggingEnabled,\n      tabbed,\n      wrapAround,\n      zoomScale,\n    } = props;\n\n    const filteredSlides = React.Children.toArray(children).filter(Boolean);\n    const slideCount = filteredSlides.length;\n\n    const cellAlign: CellAlign =\n      slideWidth || propsSlidesToScroll === 'auto' ? 'left' : propsCellAlign;\n\n    const scrollMode: ScrollMode =\n      propsSlidesToScroll === 'auto' ? ScrollMode.remainder : propsScrollMode;\n\n    const [slideIOEntries, setSlideIOEntries] = useState(\n      new Map<string, boolean>()\n    );\n\n    const visibleCount = Array.from(slideIOEntries).filter(\n      ([, visible]) => visible\n    ).length;\n\n    const [constantVisibleCount, setConstantVisibleCount] =\n      useState<number>(visibleCount);\n\n    const slidesToShow = slideWidth ? constantVisibleCount : propsSlidesToShow;\n\n    const slidesToScroll =\n      animation === 'fade'\n        ? slidesToShow\n        : propsSlidesToScroll === 'auto'\n        ? Math.max(constantVisibleCount, 1)\n        : propsSlidesToScroll;\n\n    const [currentSlide, setCurrentSlide] = useState<number>(() =>\n      getDefaultSlideIndex(\n        slideIndex,\n        slideCount,\n        slidesToShow,\n        slidesToScroll,\n        cellAlign,\n        autoplayReverse,\n        scrollMode\n      )\n    );\n    const [pause, setPause] = useState<boolean>(false);\n    const [isDragging, setIsDragging] = useState<boolean>(false);\n    const [dragDistance, setDragDistance] = useState<number>(0);\n    const [animationDistance, setAnimationDistance] = useState<number>(0);\n    const [isAnimating, setIsAnimating] = useState<boolean>(false);\n\n    const updateSlideIOEntry = useCallback(\n      (id: string, isFullyVisible: boolean) => {\n        if (!!slideIOEntries.get(id) === isFullyVisible) return;\n\n        setSlideIOEntries((prev) => {\n          const newMap = new Map(prev);\n          newMap.set(id, isFullyVisible);\n          return newMap;\n        });\n      },\n      [slideIOEntries]\n    );\n\n    const prevDragged = useRef(false);\n\n    useEffect(() => {\n      if (isDragging) prevDragged.current = true;\n\n      if (!(isDragging || isAnimating)) {\n        // Wait for the animation to complete after dragging\n        if (!prevDragged.current) setConstantVisibleCount(visibleCount);\n        prevDragged.current = false;\n      }\n    }, [isAnimating, isDragging, visibleCount]);\n\n    const prevXPosition = useRef<number | null>(null);\n    const preDragOffset = useRef<number>(0);\n    const sliderListRef = useRef<HTMLDivElement | null>(null);\n    const defaultCarouselRef = useRef<HTMLDivElement>(null);\n    const autoplayTimeout = useRef<ReturnType<typeof setTimeout>>();\n    const autoplayLastTriggeredRef = useRef<number | null>(null);\n    const isMounted = useRef<boolean>(true);\n\n    const setSliderListRef = useCallback((node: HTMLDivElement) => {\n      if (node) {\n        // disable img draggable attribute by default, this will improve the dragging\n        // applying the querySelectorAll on just the descendants of the sliderList prevents\n        // impacting DOM elements outside our scope\n        node\n          .querySelectorAll('.slider-list img')\n          .forEach((el) => el.setAttribute('draggable', 'false'));\n      }\n      sliderListRef.current = node;\n    }, []);\n\n    useEffect(() => {\n      isMounted.current = true;\n      return () => {\n        isMounted.current = false;\n      };\n    }, []);\n\n    const forwardedRef = useForwardRef<HTMLDivElement>(ref);\n    const carouselRef = forwardedRef || defaultCarouselRef;\n\n    const goToSlide = useCallback(\n      (targetSlideUnbounded: number) => {\n        if (!sliderListRef.current || !carouselRef.current) return;\n\n        const targetSlideBounded = getBoundedIndex(\n          targetSlideUnbounded,\n          slideCount\n        );\n\n        const slideChanged = targetSlideUnbounded !== currentSlide;\n        slideChanged && beforeSlide(currentSlide, targetSlideBounded);\n\n        // Calculate the distance the slide transition animation needs to cover.\n        const currentOffset =\n          sliderListRef.current.getBoundingClientRect().left -\n          carouselRef.current.getBoundingClientRect().left;\n        const sliderWidth = sliderListRef.current.offsetWidth;\n        let targetOffset =\n          (getPercentOffsetForSlide(\n            targetSlideBounded,\n            slideCount,\n            slidesToShow,\n            cellAlign,\n            wrapAround\n          ) /\n            100) *\n          sliderWidth;\n        if (wrapAround) {\n          // We have to do a bit of a recovery effort to figure out the closest\n          // offset based on the direction we're going in the slides. The reason\n          // it's complicated is because, when wrapped, both the current offset\n          // and the calculated target offset are based on bounded slide indices -\n          // that is, when wrapping, we often skip back to the first or last slide\n          // seamlessly to make the carousel appear to infinitely repeat\n\n          // The DOM width of `slideCount` slides\n          const slideSetWidth = sliderWidth / 3;\n\n          if (targetSlideUnbounded < 0) {\n            targetOffset += slideSetWidth;\n          }\n          if (targetSlideUnbounded >= slideCount) {\n            targetOffset -= slideSetWidth;\n          }\n        }\n\n        setAnimationDistance(targetOffset - currentOffset);\n\n        if (slideChanged) {\n          setCurrentSlide(targetSlideBounded);\n\n          // if animation is disabled decrease the speed to 40\n          const msToEndOfAnimation = !disableAnimation ? speed || 500 : 40;\n          setTimeout(() => {\n            if (!isMounted.current) return;\n            afterSlide(targetSlideBounded);\n          }, msToEndOfAnimation);\n        }\n      },\n      [\n        afterSlide,\n        beforeSlide,\n        carouselRef,\n        cellAlign,\n        currentSlide,\n        disableAnimation,\n        speed,\n        slideCount,\n        slidesToShow,\n        wrapAround,\n      ]\n    );\n\n    const nextSlide = useCallback(() => {\n      const nextSlideIndex = getNextMoveIndex(\n        scrollMode,\n        wrapAround,\n        currentSlide,\n        slideCount,\n        slidesToScroll,\n        slidesToShow,\n        cellAlign\n      );\n\n      if (currentSlide !== nextSlideIndex) {\n        goToSlide(nextSlideIndex);\n      }\n    }, [\n      cellAlign,\n      currentSlide,\n      goToSlide,\n      slidesToScroll,\n      scrollMode,\n      slideCount,\n      slidesToShow,\n      wrapAround,\n    ]);\n\n    const prevSlide = useCallback(() => {\n      const prevSlideIndex = getPrevMoveIndex(\n        scrollMode,\n        wrapAround,\n        currentSlide,\n        slidesToScroll,\n        slidesToShow,\n        cellAlign\n      );\n\n      if (currentSlide !== prevSlideIndex) {\n        goToSlide(prevSlideIndex);\n      }\n    }, [\n      cellAlign,\n      currentSlide,\n      goToSlide,\n      slidesToScroll,\n      scrollMode,\n      slidesToShow,\n      wrapAround,\n    ]);\n\n    // When user changed the slideIndex property from outside.\n    const prevMovedToSlideIndex = useRef(slideIndex);\n    useEffect(() => {\n      if (\n        slideIndex !== undefined &&\n        slideIndex !== prevMovedToSlideIndex.current &&\n        !autoplayReverse\n      ) {\n        goToSlide(slideIndex);\n        prevMovedToSlideIndex.current = slideIndex;\n      }\n    }, [slideIndex, autoplayReverse, goToSlide]);\n\n    useEffect(() => {\n      let pauseStarted: number | null = null;\n\n      // Keep track of when autoplay was paused so we can resume it with the same\n      // remaining time to the next slide transition\n      if (pause) {\n        pauseStarted = Date.now();\n      }\n\n      return () => {\n        if (\n          pauseStarted !== null &&\n          autoplayLastTriggeredRef.current !== null\n        ) {\n          autoplayLastTriggeredRef.current += Date.now() - pauseStarted;\n        }\n      };\n    }, [pause]);\n\n    useEffect(() => {\n      if (autoplay && !pause) {\n        // Adjust the timeout duration to account for changes that triggered the\n        // re-creation of this timeout, such as the currentSlide being changed\n        // periodically to make wrapAround loop forever\n        const adjustedTimeoutMs =\n          autoplayLastTriggeredRef.current !== null\n            ? autoplayInterval - (Date.now() - autoplayLastTriggeredRef.current)\n            : autoplayInterval;\n\n        autoplayTimeout.current = setTimeout(() => {\n          autoplayLastTriggeredRef.current = Date.now();\n\n          if (autoplayReverse) {\n            prevSlide();\n          } else {\n            nextSlide();\n          }\n        }, adjustedTimeoutMs);\n      }\n\n      // Clear the timeout if user hover on carousel\n      if (autoplay && pause) {\n        clearTimeout(autoplayTimeout.current);\n      }\n\n      return () => {\n        clearTimeout(autoplayTimeout.current);\n      };\n    }, [\n      pause,\n      autoplay,\n      autoplayInterval,\n      autoplayReverse,\n      prevSlide,\n      nextSlide,\n    ]);\n\n    const onKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n      let keyCommand: KeyCodeFunction = null;\n      (Object.keys(keyCodeConfig) as (keyof KeyCodeConfig)[]).forEach(\n        (command) => {\n          if (keyCodeConfig[command]?.includes(event.keyCode)) {\n            keyCommand = command;\n          }\n        }\n      );\n\n      if (keyCommand === null) return;\n\n      // At this point we know some action is going to be triggered, so we\n      // preventDefault to avoid the browser interpreting the key event and\n      // stopPropagation to avoid any higher-up handlers from interpreting it.\n      event.preventDefault();\n      event.stopPropagation();\n\n      switch (keyCommand) {\n        case 'nextSlide':\n          onUserNavigation(event);\n          nextSlide();\n          break;\n        case 'previousSlide':\n          onUserNavigation(event);\n          prevSlide();\n          break;\n        case 'firstSlide':\n        case 'lastSlide': {\n          onUserNavigation(event);\n\n          const dotIndices = getDotIndexes(\n            slideCount,\n            slidesToScroll,\n            scrollMode,\n            slidesToShow,\n            wrapAround,\n            cellAlign\n          );\n\n          if (keyCommand === 'firstSlide') {\n            goToSlide(dotIndices[0]);\n          } else {\n            goToSlide(dotIndices[dotIndices.length - 1]);\n          }\n          break;\n        }\n        case 'pause':\n          setPause((p) => !p);\n          break;\n      }\n    };\n\n    const dragPositions = useRef<{ pos: number; time: number }[]>([]);\n\n    const handleDragEnd = (\n      e: React.MouseEvent<HTMLDivElement> | React.TouchEvent<HTMLDivElement>\n    ) => {\n      if (!isDragging || !carouselRef.current) return;\n\n      setIsDragging(false);\n\n      // Inertia calculation is used to allow quick flicks to scroll the carousel\n      // where they might not based on the start and end points of the gesture\n      // alone. In certain conditions, the inertia may also scroll the carousel\n      // several times.\n      let distanceFromInertia = 0;\n      if (dragPositions.current.length > 1) {\n        const startMove = dragPositions.current[0];\n        const endMove = dragPositions.current[dragPositions.current.length - 1];\n        const timeOffset = endMove.time - startMove.time;\n        const goodInertiaFeelConstant = 9;\n        const goodFrictionFeelConstant = 0.92;\n        const initialVelocity =\n          goodInertiaFeelConstant *\n          Math.abs((endMove.pos - startMove.pos) / timeOffset);\n        let velocity = initialVelocity;\n\n        while (Math.abs(velocity) > 1) {\n          distanceFromInertia += velocity;\n          velocity *= goodFrictionFeelConstant;\n        }\n      }\n      dragPositions.current = [];\n\n      const adjustedDragDistance =\n        Math.abs(dragDistance) + Math.abs(distanceFromInertia);\n\n      onDragEnd(e);\n\n      prevXPosition.current = null;\n      setDragDistance(0);\n\n      const oneScrollWidth =\n        carouselRef.current.offsetWidth *\n        Math.min(1, slidesToScroll / slidesToShow);\n      const dragThreshold = oneScrollWidth * propsDragThreshold;\n\n      if (adjustedDragDistance < dragThreshold) {\n        goToSlide(currentSlide);\n        return;\n      }\n\n      // If skipping over multiple slides at a time is still roughly trackable by\n      // your eyes, we allow for skipping multiple slides with a single gesture.\n      // This formula is just based off an observation that it is confusing to\n      // skip from slides 1 to 3 when only one slide is shown at a time, but\n      // skipping from 1 to 4 or so with two slides shown at a time is pulled-back\n      // enough that you can still roughly keep track of your place in the\n      // carousel.\n      const canMaintainVisualContinuity = slidesToShow >= 2 * slidesToScroll;\n      const timesToMove = canMaintainVisualContinuity\n        ? 1 +\n          Math.floor((adjustedDragDistance - dragThreshold) / oneScrollWidth)\n        : 1;\n\n      let nextSlideIndex = currentSlide;\n      for (let index = 0; index < timesToMove; index += 1) {\n        if (dragDistance > 0) {\n          nextSlideIndex = getNextMoveIndex(\n            scrollMode,\n            wrapAround,\n            nextSlideIndex,\n            slideCount,\n            slidesToScroll,\n            slidesToShow,\n            cellAlign\n          );\n        } else {\n          nextSlideIndex = getPrevMoveIndex(\n            scrollMode,\n            wrapAround,\n            nextSlideIndex,\n            slidesToScroll,\n            slidesToShow,\n            cellAlign\n          );\n        }\n      }\n\n      if (nextSlideIndex !== currentSlide) {\n        onUserNavigation(e);\n      }\n\n      goToSlide(nextSlideIndex);\n    };\n\n    const onTouchStart = useCallback(\n      (e: React.TouchEvent<HTMLDivElement>) => {\n        if (\n          !mobileDraggingEnabled ||\n          !sliderListRef.current ||\n          !carouselRef.current\n        ) {\n          return;\n        }\n        setIsDragging(true);\n        preDragOffset.current =\n          sliderListRef.current.getBoundingClientRect().left -\n          carouselRef.current.getBoundingClientRect().left;\n\n        onDragStart(e);\n      },\n      [carouselRef, onDragStart, mobileDraggingEnabled]\n    );\n\n    const handlePointerMove = useCallback(\n      (xPosition: number) => {\n        if (!isDragging) return;\n\n        const isFirstMove = prevXPosition.current === null;\n        const delta =\n          prevXPosition.current !== null\n            ? xPosition - prevXPosition.current\n            : 0;\n        const nextDragDistance = dragDistance + delta;\n\n        const now = Date.now();\n        // Maintain a buffer of drag positions from the last 100ms\n        while (dragPositions.current.length > 0) {\n          if (now - dragPositions.current[0].time <= 100) {\n            break;\n          }\n          dragPositions.current.shift();\n        }\n        dragPositions.current.push({ pos: nextDragDistance, time: now });\n\n        if (!isFirstMove) {\n          // nextDragDistance will always be `0` on the first move event, so we\n          // skip it because the value is already set to 0 at this point\n          setDragDistance(nextDragDistance);\n        }\n\n        prevXPosition.current = xPosition;\n      },\n      [isDragging, dragDistance]\n    );\n\n    const onTouchMove = useCallback(\n      (e: React.TouchEvent<HTMLDivElement>) => {\n        if (!isDragging || !carouselRef.current) return;\n\n        onDragStart(e);\n\n        const moveValue = carouselRef.current.offsetWidth - e.touches[0].pageX;\n\n        handlePointerMove(moveValue);\n      },\n      [isDragging, carouselRef, handlePointerMove, onDragStart]\n    );\n\n    const onMouseDown = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (\n          !desktopDraggingEnabled ||\n          !sliderListRef.current ||\n          !carouselRef.current\n        )\n          return;\n\n        setIsDragging(true);\n\n        preDragOffset.current =\n          sliderListRef.current.getBoundingClientRect().left -\n          carouselRef.current.getBoundingClientRect().left;\n\n        onDragStart(e);\n      },\n      [carouselRef, desktopDraggingEnabled, onDragStart]\n    );\n\n    const onMouseMove = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isDragging || !carouselRef.current) return;\n\n        onDrag(e);\n\n        const offsetX =\n          e.clientX - carouselRef.current.getBoundingClientRect().left;\n        const moveValue = carouselRef.current.offsetWidth - offsetX;\n\n        handlePointerMove(moveValue);\n      },\n      [carouselRef, isDragging, handlePointerMove, onDrag]\n    );\n\n    const onMouseUp = (e: React.MouseEvent<HTMLDivElement>) => {\n      e.preventDefault();\n      handleDragEnd(e);\n    };\n\n    const onMouseEnter = useCallback(() => {\n      if (pauseOnHover) {\n        setPause(true);\n      }\n    }, [pauseOnHover]);\n\n    const onMouseLeave = useCallback(() => {\n      if (pauseOnHover) {\n        setPause(false);\n      }\n    }, [pauseOnHover]);\n\n    const {\n      frameHeight,\n      handleVisibleSlideHeightChange,\n      initializedAdaptiveHeight,\n    } = useFrameHeight(adaptiveHeight, slidesToShow, slideCount);\n\n    const renderSlides = (typeOfSlide?: 'prev-cloned' | 'next-cloned') => {\n      const slides = filteredSlides.map((child, index) => {\n        return (\n          <Slide\n            key={`${typeOfSlide}-${index}`}\n            id={`${typeOfSlide}-${index}`}\n            carouselId={carouselId}\n            count={slideCount}\n            index={index}\n            isCurrentSlide={currentSlide === index}\n            typeOfSlide={typeOfSlide}\n            wrapAround={wrapAround}\n            cellSpacing={cellSpacing}\n            animation={animation}\n            speed={speed}\n            zoomScale={zoomScale}\n            onVisibleSlideHeightChange={handleVisibleSlideHeightChange}\n            slideWidth={slideWidth}\n            updateIOEntry={updateSlideIOEntry}\n            adaptiveHeight={adaptiveHeight}\n            initializedAdaptiveHeight={initializedAdaptiveHeight}\n            carouselRef={carouselRef}\n            tabbed={tabbed}\n          >\n            {child}\n          </Slide>\n        );\n      });\n\n      return slides;\n    };\n\n    return (\n      <div\n        className={'slider-container'}\n        style={{\n          position: 'relative',\n        }}\n        onMouseEnter={onMouseEnter}\n        onMouseLeave={onMouseLeave}\n        aria-label={frameAriaLabel}\n        role={landmark ? 'region' : 'group'}\n        aria-roledescription=\"carousel\"\n        id={carouselId}\n        data-testid={carouselId}\n      >\n        <AnnounceSlide\n          ariaLive={autoplay && !pause ? 'off' : 'polite'}\n          message={renderAnnounceSlideMessage({\n            currentSlide,\n            count: slideCount,\n          })}\n        />\n\n        {renderControls(\n          { ...props, carouselId },\n          slideCount,\n          currentSlide,\n          goToSlide,\n          nextSlide,\n          prevSlide,\n          slidesToScroll\n        )}\n\n        <div\n          className={['slider-frame', className || ''].join(' ').trim()}\n          style={{\n            overflow: 'hidden',\n            width: '100%',\n            position: 'relative',\n            outline: 'none',\n            touchAction: 'pan-y',\n            height: frameHeight,\n            transition: adaptiveHeightAnimation\n              ? 'height 300ms ease-in-out'\n              : undefined,\n            willChange: 'height',\n            userSelect: 'none',\n            ...style,\n          }}\n          tabIndex={enableKeyboardControls ? 0 : -1}\n          onKeyDown={enableKeyboardControls ? onKeyDown : undefined}\n          ref={carouselRef}\n          onMouseUp={onMouseUp}\n          onMouseDown={onMouseDown}\n          onMouseMove={onMouseMove}\n          onMouseLeave={onMouseUp}\n          onTouchStart={onTouchStart}\n          onTouchEnd={handleDragEnd}\n          onTouchMove={onTouchMove}\n          id={`${carouselId}-slider-frame`}\n          data-testid={`${carouselId}-slider-frame`}\n        >\n          <SliderList\n            animationDistance={animationDistance}\n            cellAlign={cellAlign}\n            currentSlide={currentSlide}\n            disableEdgeSwiping={props.disableEdgeSwiping}\n            draggedOffset={preDragOffset.current - dragDistance}\n            disableAnimation={disableAnimation}\n            easing={props.easing}\n            edgeEasing={props.edgeEasing}\n            isDragging={isDragging}\n            ref={setSliderListRef}\n            scrollMode={scrollMode}\n            animation={animation}\n            slideCount={slideCount}\n            slidesToScroll={slidesToScroll}\n            slidesToShow={slidesToShow}\n            speed={speed}\n            slideWidth={slideWidth}\n            wrapAround={wrapAround}\n            setIsAnimating={setIsAnimating}\n          >\n            {wrapAround ? renderSlides('prev-cloned') : null}\n            {renderSlides()}\n            {wrapAround ? renderSlides('next-cloned') : null}\n          </SliderList>\n        </div>\n      </div>\n    );\n  }\n);\n\nCarousel.defaultProps = defaultProps;\nCarousel.displayName = 'Carousel';\n\nexport default Carousel;\n","import { useEffect, useRef, ForwardedRef } from 'react';\n\nexport const useForwardRef = <T>(ref: ForwardedRef<T>) => {\n  const targetRef = useRef<T>(null);\n\n  useEffect(() => {\n    if (!ref) return;\n\n    if (typeof ref === 'function') {\n      ref(targetRef.current);\n    } else {\n      ref.current = targetRef.current;\n    }\n  }, [ref]);\n\n  return targetRef;\n};\n"],"names":["_ref","cdnSuffix","_ref$cdnSuffix","_ref$cdnUrl","cdnUrl","countryCode","style","_ref$svg","svg","props","_objectWithoutPropertiesLoose","_excluded","flagUrl","toLowerCase","createElement","Object","assign","src","_extends","display","width","height","verticalAlign","emoji","toUpperCase","replace","_char","String","fromCodePoint","charCodeAt","role","fontSize","lineHeight","getSlideStyles","count","isCurrentSlide","isVisibleSlide","wrapAround","cellSpacing","animation","speed","zoomScale","adaptiveHeight","initializedAdaptiveHeight","slideWidth","getSlideWidth","concat","visibleSlideOpacity","animationSpeed","padding","transition","transform","opacity","slide_default","children","index","typeOfSlide","onVisibleSlideHeightChange","updateIOEntry","id","carouselRef","carouselId","tabbed","_a","customIndex","generateIndex","slideRef","useRef2","entry","useSlideIntersectionObserver","elementRef","rootRef","callback","setEntry","useState","callbackRef","useRef","useEffect","current","node","root","window","IntersectionObserver","observer","entries","forEach","entry2","threshold","observe","disconnect","intersectionRatio","isVisible","isIntersecting","isFullyVisible","prevIsVisibleRef","useEffect2","_a2","slideHeight","getBoundingClientRect","prevIsVisible","currentSlideClass","jsx","__spreadProps","__spreadValues","ref","inert","className","styles","position","overflow","margin","clip","whiteSpace","border","announce_slide_default","_ref2","message","ariaLive","jsx2","tabIndex","getNextMoveIndex","scrollMode","currentSlide","slideCount","slidesToScroll","slidesToShow","cellAlign","Math","min","getPrevMoveIndex","max","getBoundedIndex","rawIndex","defaultButtonStyles","disabled","background","color","textTransform","cursor","PreviousButton","_ref5","previousSlide","defaultControlsConfig","prevButtonClassName","prevButtonStyle","prevButtonText","prevButtonOnClick","onUserNavigation","previousDisabled","jsx3","onClick","event","defaultPrevented","preventDefault","type","NextButton","_ref7","nextSlide","nextButtonClassName","nextButtonStyle","nextButtonText","nextButtonOnClick","nextDisabled","getDotIndexes","dotIndexes","scrollSlides","i","push","lastPossibleIndexWithoutWhitespace","length","firstPossibleIndexWithoutWhitespace","reverse","PagingDots","_ref8","pagingDotsIndices","pagingDotsContainerClassName","pagingDotsClassName","pagingDotsStyle","pagingDotsOnClick","goToSlide","getButtonStyles","useCallback","active","fill","currentSlideBounded","top","listStyleType","map","slideIndex","isActive","join","focusable","viewBox","cx","cy","r","getPercentOffsetForSlide","renderedSlideCount","singleSlidePercentOfWhole","slide0Offset","SliderList","React3","_ref9","forwardedRef","animationDistance","disableAnimation","disableEdgeSwiping","draggedOffset","easing","edgeEasing","isDragging","setIsAnimating","listVisibleWidth","percentOffsetForSlideProps","clampedDraggedOffset","clampOffsets","slideBasedOffset","isEdgeEasing","value","isAnimating","useTween","durationMs","easingFunction","navigationNum","shouldInterrupt","normalizedTimeRaw","setNormalizedTime","useState2","startTime","useRef3","Date","now","rAF","isFirstRender","lastNavigationNum","normalizedTime","useEffect3","tick","requestAnimationFrame","currentTime","normalizedTime2","cancelAnimationFrame","positioning","transitionOffset","useEffect4","jsx4","textAlign","userSelect","displayName","commonStyles","zIndex","left","bottom","right","controlsMap","funcName","key","controls_default","renderControls","prevSlide","withoutControls","disableCheckProps","_ref6","nextButtonDisabled","_ref4","prevButtonDisabled","control","pos","jsx5","alignItems","justifyContent","getControlContainerFlexStyles","pointerEvents","containerClassName","trim","call","vertical","Fragment","easeOut","t","__pow","default_carousel_props_default","adaptiveHeightAnimation","afterSlide","autoplay","autoplayInterval","autoplayReverse","beforeSlide","dragging","dragThreshold","enableKeyboardControls","frameAriaLabel","keyCodeConfig","firstSlide","lastSlide","pause","landmark","onDragStart","onDrag","onDragEnd","pauseOnHover","renderAnnounceSlideMessage","_ref3","renderBottomCenterControls","jsx6","renderCenterLeftControls","renderCenterRightControls","swiping","Fragment2","useFrameHeight","visibleHeights","setVisibleHeights","visibleHeightsRef","initialState","setValue","useState3","valueRef","useRef4","useCallback2","newValue","useStateWithRef","setInitializedAdaptiveHeight","useState4","handleVisibleSlideHeightChange","useCallback3","latestVisibleHeights","newVisibleHeights","filter","ceil","frameHeight","useMemo","maxHeight","Carousel","React5","rawProps","internalCarouselId","useId","propsCellAlign","desktopDraggingEnabled","propsDragThreshold","propsScrollMode","propsSlidesToScroll","propsSlidesToShow","mobileDraggingEnabled","filteredSlides","toArray","Boolean","slideIOEntries","setSlideIOEntries","useState5","Map","visibleCount","Array","from","_ref10","visible","constantVisibleCount","setConstantVisibleCount","setCurrentSlide","getDefaultSlideIndex","setPause","setIsDragging","dragDistance","setDragDistance","setAnimationDistance","updateSlideIOEntry","useCallback4","get","prev","newMap","set","prevDragged","useRef6","useEffect6","prevXPosition","preDragOffset","sliderListRef","defaultCarouselRef","autoplayTimeout","autoplayLastTriggeredRef","isMounted","setSliderListRef","querySelectorAll","el","setAttribute","targetRef","useRef5","useEffect5","useForwardRef","targetSlideUnbounded","targetSlideBounded","slideChanged","currentOffset","sliderWidth","offsetWidth","targetOffset","slideSetWidth","setTimeout","nextSlideIndex","prevSlideIndex","prevMovedToSlideIndex","pauseStarted","adjustedTimeoutMs","clearTimeout","dragPositions","handleDragEnd","e","distanceFromInertia","startMove","endMove","timeOffset","time","goodFrictionFeelConstant","velocity","abs","adjustedDragDistance","oneScrollWidth","timesToMove","floor","onTouchStart","handlePointerMove","xPosition","isFirstMove","delta","nextDragDistance","shift","onTouchMove","moveValue","touches","pageX","onMouseDown","onMouseMove","offsetX","clientX","onMouseUp","onMouseEnter","onMouseLeave","renderSlides","child","jsx7","jsxs","outline","touchAction","willChange","onKeyDown","keyCommand","keys","command","includes","keyCode","stopPropagation","dotIndices","p","onTouchEnd","defaultProps"],"sourceRoot":""}