{"version":3,"file":"static/js/475.fc7d6044.chunk.js","mappings":"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","sources":["../node_modules/graphql/jsutils/invariant.mjs","../node_modules/graphql/language/location.mjs","../node_modules/graphql/language/printLocation.mjs","../node_modules/graphql/error/GraphQLError.mjs","../node_modules/graphql/jsutils/isObjectLike.mjs","../node_modules/graphql/error/syntaxError.mjs","../node_modules/graphql/language/directiveLocation.mjs","../node_modules/graphql/language/tokenKind.mjs","../node_modules/graphql/language/lexer.mjs","../node_modules/graphql/jsutils/instanceOf.mjs","../node_modules/graphql/language/source.mjs","../node_modules/graphql/language/parser.mjs","../node_modules/graphql-tag/src/index.ts","../node_modules/@apollo/src/react/hooks/useSyncExternalStore.ts","../node_modules/@apollo/src/react/parser/index.ts","../node_modules/@apollo/src/react/hooks/useApolloClient.ts","../node_modules/@apollo/src/react/hooks/internal/wrapHook.ts","../node_modules/@apollo/src/react/hooks/useQuery.ts"],"sourcesContent":["export function invariant(condition, message) {\n  const booleanCondition = Boolean(condition);\n\n  if (!booleanCondition) {\n    throw new Error(\n      message != null ? message : 'Unexpected invariant triggered.',\n    );\n  }\n}\n","import { invariant } from '../jsutils/invariant.mjs';\nconst LineRegExp = /\\r\\n|[\\n\\r]/g;\n/**\n * Represents a location in a Source.\n */\n\n/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\nexport function getLocation(source, position) {\n  let lastLineStart = 0;\n  let line = 1;\n\n  for (const match of source.body.matchAll(LineRegExp)) {\n    typeof match.index === 'number' || invariant(false);\n\n    if (match.index >= position) {\n      break;\n    }\n\n    lastLineStart = match.index + match[0].length;\n    line += 1;\n  }\n\n  return {\n    line,\n    column: position + 1 - lastLineStart,\n  };\n}\n","import { getLocation } from './location.mjs';\n\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\nexport function printLocation(location) {\n  return printSourceLocation(\n    location.source,\n    getLocation(location.source, location.start),\n  );\n}\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\n\nexport function printSourceLocation(source, sourceLocation) {\n  const firstLineColumnOffset = source.locationOffset.column - 1;\n  const body = ''.padStart(firstLineColumnOffset) + source.body;\n  const lineIndex = sourceLocation.line - 1;\n  const lineOffset = source.locationOffset.line - 1;\n  const lineNum = sourceLocation.line + lineOffset;\n  const columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;\n  const columnNum = sourceLocation.column + columnOffset;\n  const locationStr = `${source.name}:${lineNum}:${columnNum}\\n`;\n  const lines = body.split(/\\r\\n|[\\n\\r]/g);\n  const locationLine = lines[lineIndex]; // Special case for minified documents\n\n  if (locationLine.length > 120) {\n    const subLineIndex = Math.floor(columnNum / 80);\n    const subLineColumnNum = columnNum % 80;\n    const subLines = [];\n\n    for (let i = 0; i < locationLine.length; i += 80) {\n      subLines.push(locationLine.slice(i, i + 80));\n    }\n\n    return (\n      locationStr +\n      printPrefixedLines([\n        [`${lineNum} |`, subLines[0]],\n        ...subLines.slice(1, subLineIndex + 1).map((subLine) => ['|', subLine]),\n        ['|', '^'.padStart(subLineColumnNum)],\n        ['|', subLines[subLineIndex + 1]],\n      ])\n    );\n  }\n\n  return (\n    locationStr +\n    printPrefixedLines([\n      // Lines specified like this: [\"prefix\", \"string\"],\n      [`${lineNum - 1} |`, lines[lineIndex - 1]],\n      [`${lineNum} |`, locationLine],\n      ['|', '^'.padStart(columnNum)],\n      [`${lineNum + 1} |`, lines[lineIndex + 1]],\n    ])\n  );\n}\n\nfunction printPrefixedLines(lines) {\n  const existingLines = lines.filter(([_, line]) => line !== undefined);\n  const padLen = Math.max(...existingLines.map(([prefix]) => prefix.length));\n  return existingLines\n    .map(([prefix, line]) => prefix.padStart(padLen) + (line ? ' ' + line : ''))\n    .join('\\n');\n}\n","import { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { getLocation } from '../language/location.mjs';\nimport {\n  printLocation,\n  printSourceLocation,\n} from '../language/printLocation.mjs';\n\nfunction toNormalizedOptions(args) {\n  const firstArg = args[0];\n\n  if (firstArg == null || 'kind' in firstArg || 'length' in firstArg) {\n    return {\n      nodes: firstArg,\n      source: args[1],\n      positions: args[2],\n      path: args[3],\n      originalError: args[4],\n      extensions: args[5],\n    };\n  }\n\n  return firstArg;\n}\n/**\n * A GraphQLError describes an Error found during the parse, validate, or\n * execute phases of performing a GraphQL operation. In addition to a message\n * and stack trace, it also includes information about the locations in a\n * GraphQL document and/or execution result that correspond to the Error.\n */\n\nexport class GraphQLError extends Error {\n  /**\n   * An array of `{ line, column }` locations within the source GraphQL document\n   * which correspond to this error.\n   *\n   * Errors during validation often contain multiple locations, for example to\n   * point out two things with the same name. Errors during execution include a\n   * single location, the field which produced the error.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array describing the JSON-path into the execution response which\n   * corresponds to this error. Only included for errors during execution.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array of GraphQL AST Nodes corresponding to this error.\n   */\n\n  /**\n   * The source GraphQL document for the first location of this error.\n   *\n   * Note that if this Error represents more than one node, the source may not\n   * represent nodes after the first node.\n   */\n\n  /**\n   * An array of character offsets within the source GraphQL document\n   * which correspond to this error.\n   */\n\n  /**\n   * The original error thrown from a field resolver during execution.\n   */\n\n  /**\n   * Extension fields to add to the formatted error.\n   */\n\n  /**\n   * @deprecated Please use the `GraphQLErrorOptions` constructor overload instead.\n   */\n  constructor(message, ...rawArgs) {\n    var _this$nodes, _nodeLocations$, _ref;\n\n    const { nodes, source, positions, path, originalError, extensions } =\n      toNormalizedOptions(rawArgs);\n    super(message);\n    this.name = 'GraphQLError';\n    this.path = path !== null && path !== void 0 ? path : undefined;\n    this.originalError =\n      originalError !== null && originalError !== void 0\n        ? originalError\n        : undefined; // Compute list of blame nodes.\n\n    this.nodes = undefinedIfEmpty(\n      Array.isArray(nodes) ? nodes : nodes ? [nodes] : undefined,\n    );\n    const nodeLocations = undefinedIfEmpty(\n      (_this$nodes = this.nodes) === null || _this$nodes === void 0\n        ? void 0\n        : _this$nodes.map((node) => node.loc).filter((loc) => loc != null),\n    ); // Compute locations in the source for the given nodes/positions.\n\n    this.source =\n      source !== null && source !== void 0\n        ? source\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : (_nodeLocations$ = nodeLocations[0]) === null ||\n          _nodeLocations$ === void 0\n        ? void 0\n        : _nodeLocations$.source;\n    this.positions =\n      positions !== null && positions !== void 0\n        ? positions\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => loc.start);\n    this.locations =\n      positions && source\n        ? positions.map((pos) => getLocation(source, pos))\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => getLocation(loc.source, loc.start));\n    const originalExtensions = isObjectLike(\n      originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions,\n    )\n      ? originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions\n      : undefined;\n    this.extensions =\n      (_ref =\n        extensions !== null && extensions !== void 0\n          ? extensions\n          : originalExtensions) !== null && _ref !== void 0\n        ? _ref\n        : Object.create(null); // Only properties prescribed by the spec should be enumerable.\n    // Keep the rest as non-enumerable.\n\n    Object.defineProperties(this, {\n      message: {\n        writable: true,\n        enumerable: true,\n      },\n      name: {\n        enumerable: false,\n      },\n      nodes: {\n        enumerable: false,\n      },\n      source: {\n        enumerable: false,\n      },\n      positions: {\n        enumerable: false,\n      },\n      originalError: {\n        enumerable: false,\n      },\n    }); // Include (non-enumerable) stack trace.\n\n    /* c8 ignore start */\n    // FIXME: https://github.com/graphql/graphql-js/issues/2317\n\n    if (\n      originalError !== null &&\n      originalError !== void 0 &&\n      originalError.stack\n    ) {\n      Object.defineProperty(this, 'stack', {\n        value: originalError.stack,\n        writable: true,\n        configurable: true,\n      });\n    } else if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, GraphQLError);\n    } else {\n      Object.defineProperty(this, 'stack', {\n        value: Error().stack,\n        writable: true,\n        configurable: true,\n      });\n    }\n    /* c8 ignore stop */\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLError';\n  }\n\n  toString() {\n    let output = this.message;\n\n    if (this.nodes) {\n      for (const node of this.nodes) {\n        if (node.loc) {\n          output += '\\n\\n' + printLocation(node.loc);\n        }\n      }\n    } else if (this.source && this.locations) {\n      for (const location of this.locations) {\n        output += '\\n\\n' + printSourceLocation(this.source, location);\n      }\n    }\n\n    return output;\n  }\n\n  toJSON() {\n    const formattedError = {\n      message: this.message,\n    };\n\n    if (this.locations != null) {\n      formattedError.locations = this.locations;\n    }\n\n    if (this.path != null) {\n      formattedError.path = this.path;\n    }\n\n    if (this.extensions != null && Object.keys(this.extensions).length > 0) {\n      formattedError.extensions = this.extensions;\n    }\n\n    return formattedError;\n  }\n}\n\nfunction undefinedIfEmpty(array) {\n  return array === undefined || array.length === 0 ? undefined : array;\n}\n/**\n * See: https://spec.graphql.org/draft/#sec-Errors\n */\n\n/**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n *\n * @deprecated Please use `error.toString` instead. Will be removed in v17\n */\nexport function printError(error) {\n  return error.toString();\n}\n/**\n * Given a GraphQLError, format it according to the rules described by the\n * Response Format, Errors section of the GraphQL Specification.\n *\n * @deprecated Please use `error.toJSON` instead. Will be removed in v17\n */\n\nexport function formatError(error) {\n  return error.toJSON();\n}\n","/**\n * Return true if `value` is object-like. A value is object-like if it's not\n * `null` and has a `typeof` result of \"object\".\n */\nexport function isObjectLike(value) {\n  return typeof value == 'object' && value !== null;\n}\n","import { GraphQLError } from './GraphQLError.mjs';\n/**\n * Produces a GraphQLError representing a syntax error, containing useful\n * descriptive information about the syntax error's position in the source.\n */\n\nexport function syntaxError(source, position, description) {\n  return new GraphQLError(`Syntax Error: ${description}`, {\n    source,\n    positions: [position],\n  });\n}\n","/**\n * The set of allowed directive location values.\n */\nvar DirectiveLocation;\n\n(function (DirectiveLocation) {\n  DirectiveLocation['QUERY'] = 'QUERY';\n  DirectiveLocation['MUTATION'] = 'MUTATION';\n  DirectiveLocation['SUBSCRIPTION'] = 'SUBSCRIPTION';\n  DirectiveLocation['FIELD'] = 'FIELD';\n  DirectiveLocation['FRAGMENT_DEFINITION'] = 'FRAGMENT_DEFINITION';\n  DirectiveLocation['FRAGMENT_SPREAD'] = 'FRAGMENT_SPREAD';\n  DirectiveLocation['INLINE_FRAGMENT'] = 'INLINE_FRAGMENT';\n  DirectiveLocation['VARIABLE_DEFINITION'] = 'VARIABLE_DEFINITION';\n  DirectiveLocation['SCHEMA'] = 'SCHEMA';\n  DirectiveLocation['SCALAR'] = 'SCALAR';\n  DirectiveLocation['OBJECT'] = 'OBJECT';\n  DirectiveLocation['FIELD_DEFINITION'] = 'FIELD_DEFINITION';\n  DirectiveLocation['ARGUMENT_DEFINITION'] = 'ARGUMENT_DEFINITION';\n  DirectiveLocation['INTERFACE'] = 'INTERFACE';\n  DirectiveLocation['UNION'] = 'UNION';\n  DirectiveLocation['ENUM'] = 'ENUM';\n  DirectiveLocation['ENUM_VALUE'] = 'ENUM_VALUE';\n  DirectiveLocation['INPUT_OBJECT'] = 'INPUT_OBJECT';\n  DirectiveLocation['INPUT_FIELD_DEFINITION'] = 'INPUT_FIELD_DEFINITION';\n})(DirectiveLocation || (DirectiveLocation = {}));\n\nexport { DirectiveLocation };\n/**\n * The enum type representing the directive location values.\n *\n * @deprecated Please use `DirectiveLocation`. Will be remove in v17.\n */\n","/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\nvar TokenKind;\n\n(function (TokenKind) {\n  TokenKind['SOF'] = '<SOF>';\n  TokenKind['EOF'] = '<EOF>';\n  TokenKind['BANG'] = '!';\n  TokenKind['DOLLAR'] = '$';\n  TokenKind['AMP'] = '&';\n  TokenKind['PAREN_L'] = '(';\n  TokenKind['PAREN_R'] = ')';\n  TokenKind['SPREAD'] = '...';\n  TokenKind['COLON'] = ':';\n  TokenKind['EQUALS'] = '=';\n  TokenKind['AT'] = '@';\n  TokenKind['BRACKET_L'] = '[';\n  TokenKind['BRACKET_R'] = ']';\n  TokenKind['BRACE_L'] = '{';\n  TokenKind['PIPE'] = '|';\n  TokenKind['BRACE_R'] = '}';\n  TokenKind['NAME'] = 'Name';\n  TokenKind['INT'] = 'Int';\n  TokenKind['FLOAT'] = 'Float';\n  TokenKind['STRING'] = 'String';\n  TokenKind['BLOCK_STRING'] = 'BlockString';\n  TokenKind['COMMENT'] = 'Comment';\n})(TokenKind || (TokenKind = {}));\n\nexport { TokenKind };\n/**\n * The enum type representing the token kinds values.\n *\n * @deprecated Please use `TokenKind`. Will be remove in v17.\n */\n","import { syntaxError } from '../error/syntaxError.mjs';\nimport { Token } from './ast.mjs';\nimport { dedentBlockStringLines } from './blockString.mjs';\nimport { isDigit, isNameContinue, isNameStart } from './characterClasses.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Given a Source object, creates a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport class Lexer {\n  /**\n   * The previously focused non-ignored token.\n   */\n\n  /**\n   * The currently focused non-ignored token.\n   */\n\n  /**\n   * The (1-indexed) line containing the current token.\n   */\n\n  /**\n   * The character offset at which the current line begins.\n   */\n  constructor(source) {\n    const startOfFileToken = new Token(TokenKind.SOF, 0, 0, 0, 0);\n    this.source = source;\n    this.lastToken = startOfFileToken;\n    this.token = startOfFileToken;\n    this.line = 1;\n    this.lineStart = 0;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lexer';\n  }\n  /**\n   * Advances the token stream to the next non-ignored token.\n   */\n\n  advance() {\n    this.lastToken = this.token;\n    const token = (this.token = this.lookahead());\n    return token;\n  }\n  /**\n   * Looks ahead and returns the next non-ignored token, but does not change\n   * the state of Lexer.\n   */\n\n  lookahead() {\n    let token = this.token;\n\n    if (token.kind !== TokenKind.EOF) {\n      do {\n        if (token.next) {\n          token = token.next;\n        } else {\n          // Read the next token and form a link in the token linked-list.\n          const nextToken = readNextToken(this, token.end); // @ts-expect-error next is only mutable during parsing.\n\n          token.next = nextToken; // @ts-expect-error prev is only mutable during parsing.\n\n          nextToken.prev = token;\n          token = nextToken;\n        }\n      } while (token.kind === TokenKind.COMMENT);\n    }\n\n    return token;\n  }\n}\n/**\n * @internal\n */\n\nexport function isPunctuatorTokenKind(kind) {\n  return (\n    kind === TokenKind.BANG ||\n    kind === TokenKind.DOLLAR ||\n    kind === TokenKind.AMP ||\n    kind === TokenKind.PAREN_L ||\n    kind === TokenKind.PAREN_R ||\n    kind === TokenKind.SPREAD ||\n    kind === TokenKind.COLON ||\n    kind === TokenKind.EQUALS ||\n    kind === TokenKind.AT ||\n    kind === TokenKind.BRACKET_L ||\n    kind === TokenKind.BRACKET_R ||\n    kind === TokenKind.BRACE_L ||\n    kind === TokenKind.PIPE ||\n    kind === TokenKind.BRACE_R\n  );\n}\n/**\n * A Unicode scalar value is any Unicode code point except surrogate code\n * points. In other words, the inclusive ranges of values 0x0000 to 0xD7FF and\n * 0xE000 to 0x10FFFF.\n *\n * SourceCharacter ::\n *   - \"Any Unicode scalar value\"\n */\n\nfunction isUnicodeScalarValue(code) {\n  return (\n    (code >= 0x0000 && code <= 0xd7ff) || (code >= 0xe000 && code <= 0x10ffff)\n  );\n}\n/**\n * The GraphQL specification defines source text as a sequence of unicode scalar\n * values (which Unicode defines to exclude surrogate code points). However\n * JavaScript defines strings as a sequence of UTF-16 code units which may\n * include surrogates. A surrogate pair is a valid source character as it\n * encodes a supplementary code point (above U+FFFF), but unpaired surrogate\n * code points are not valid source characters.\n */\n\nfunction isSupplementaryCodePoint(body, location) {\n  return (\n    isLeadingSurrogate(body.charCodeAt(location)) &&\n    isTrailingSurrogate(body.charCodeAt(location + 1))\n  );\n}\n\nfunction isLeadingSurrogate(code) {\n  return code >= 0xd800 && code <= 0xdbff;\n}\n\nfunction isTrailingSurrogate(code) {\n  return code >= 0xdc00 && code <= 0xdfff;\n}\n/**\n * Prints the code point (or end of file reference) at a given location in a\n * source for use in error messages.\n *\n * Printable ASCII is printed quoted, while other points are printed in Unicode\n * code point form (ie. U+1234).\n */\n\nfunction printCodePointAt(lexer, location) {\n  const code = lexer.source.body.codePointAt(location);\n\n  if (code === undefined) {\n    return TokenKind.EOF;\n  } else if (code >= 0x0020 && code <= 0x007e) {\n    // Printable ASCII\n    const char = String.fromCodePoint(code);\n    return char === '\"' ? \"'\\\"'\" : `\"${char}\"`;\n  } // Unicode code point\n\n  return 'U+' + code.toString(16).toUpperCase().padStart(4, '0');\n}\n/**\n * Create a token with line and column location information.\n */\n\nfunction createToken(lexer, kind, start, end, value) {\n  const line = lexer.line;\n  const col = 1 + start - lexer.lineStart;\n  return new Token(kind, start, end, line, col, value);\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace until it finds the next lexable token, then lexes\n * punctuators immediately or calls the appropriate helper function for more\n * complicated tokens.\n */\n\nfunction readNextToken(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // SourceCharacter\n\n    switch (code) {\n      // Ignored ::\n      //   - UnicodeBOM\n      //   - WhiteSpace\n      //   - LineTerminator\n      //   - Comment\n      //   - Comma\n      //\n      // UnicodeBOM :: \"Byte Order Mark (U+FEFF)\"\n      //\n      // WhiteSpace ::\n      //   - \"Horizontal Tab (U+0009)\"\n      //   - \"Space (U+0020)\"\n      //\n      // Comma :: ,\n      case 0xfeff: // <BOM>\n\n      case 0x0009: // \\t\n\n      case 0x0020: // <space>\n\n      case 0x002c:\n        // ,\n        ++position;\n        continue;\n      // LineTerminator ::\n      //   - \"New Line (U+000A)\"\n      //   - \"Carriage Return (U+000D)\" [lookahead != \"New Line (U+000A)\"]\n      //   - \"Carriage Return (U+000D)\" \"New Line (U+000A)\"\n\n      case 0x000a:\n        // \\n\n        ++position;\n        ++lexer.line;\n        lexer.lineStart = position;\n        continue;\n\n      case 0x000d:\n        // \\r\n        if (body.charCodeAt(position + 1) === 0x000a) {\n          position += 2;\n        } else {\n          ++position;\n        }\n\n        ++lexer.line;\n        lexer.lineStart = position;\n        continue;\n      // Comment\n\n      case 0x0023:\n        // #\n        return readComment(lexer, position);\n      // Token ::\n      //   - Punctuator\n      //   - Name\n      //   - IntValue\n      //   - FloatValue\n      //   - StringValue\n      //\n      // Punctuator :: one of ! $ & ( ) ... : = @ [ ] { | }\n\n      case 0x0021:\n        // !\n        return createToken(lexer, TokenKind.BANG, position, position + 1);\n\n      case 0x0024:\n        // $\n        return createToken(lexer, TokenKind.DOLLAR, position, position + 1);\n\n      case 0x0026:\n        // &\n        return createToken(lexer, TokenKind.AMP, position, position + 1);\n\n      case 0x0028:\n        // (\n        return createToken(lexer, TokenKind.PAREN_L, position, position + 1);\n\n      case 0x0029:\n        // )\n        return createToken(lexer, TokenKind.PAREN_R, position, position + 1);\n\n      case 0x002e:\n        // .\n        if (\n          body.charCodeAt(position + 1) === 0x002e &&\n          body.charCodeAt(position + 2) === 0x002e\n        ) {\n          return createToken(lexer, TokenKind.SPREAD, position, position + 3);\n        }\n\n        break;\n\n      case 0x003a:\n        // :\n        return createToken(lexer, TokenKind.COLON, position, position + 1);\n\n      case 0x003d:\n        // =\n        return createToken(lexer, TokenKind.EQUALS, position, position + 1);\n\n      case 0x0040:\n        // @\n        return createToken(lexer, TokenKind.AT, position, position + 1);\n\n      case 0x005b:\n        // [\n        return createToken(lexer, TokenKind.BRACKET_L, position, position + 1);\n\n      case 0x005d:\n        // ]\n        return createToken(lexer, TokenKind.BRACKET_R, position, position + 1);\n\n      case 0x007b:\n        // {\n        return createToken(lexer, TokenKind.BRACE_L, position, position + 1);\n\n      case 0x007c:\n        // |\n        return createToken(lexer, TokenKind.PIPE, position, position + 1);\n\n      case 0x007d:\n        // }\n        return createToken(lexer, TokenKind.BRACE_R, position, position + 1);\n      // StringValue\n\n      case 0x0022:\n        // \"\n        if (\n          body.charCodeAt(position + 1) === 0x0022 &&\n          body.charCodeAt(position + 2) === 0x0022\n        ) {\n          return readBlockString(lexer, position);\n        }\n\n        return readString(lexer, position);\n    } // IntValue | FloatValue (Digit | -)\n\n    if (isDigit(code) || code === 0x002d) {\n      return readNumber(lexer, position, code);\n    } // Name\n\n    if (isNameStart(code)) {\n      return readName(lexer, position);\n    }\n\n    throw syntaxError(\n      lexer.source,\n      position,\n      code === 0x0027\n        ? 'Unexpected single quote character (\\'), did you mean to use a double quote (\")?'\n        : isUnicodeScalarValue(code) || isSupplementaryCodePoint(body, position)\n        ? `Unexpected character: ${printCodePointAt(lexer, position)}.`\n        : `Invalid character: ${printCodePointAt(lexer, position)}.`,\n    );\n  }\n\n  return createToken(lexer, TokenKind.EOF, bodyLength, bodyLength);\n}\n/**\n * Reads a comment token from the source file.\n *\n * ```\n * Comment :: # CommentChar* [lookahead != CommentChar]\n *\n * CommentChar :: SourceCharacter but not LineTerminator\n * ```\n */\n\nfunction readComment(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // LineTerminator (\\n | \\r)\n\n    if (code === 0x000a || code === 0x000d) {\n      break;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      break;\n    }\n  }\n\n  return createToken(\n    lexer,\n    TokenKind.COMMENT,\n    start,\n    position,\n    body.slice(start + 1, position),\n  );\n}\n/**\n * Reads a number token from the source file, either a FloatValue or an IntValue\n * depending on whether a FractionalPart or ExponentPart is encountered.\n *\n * ```\n * IntValue :: IntegerPart [lookahead != {Digit, `.`, NameStart}]\n *\n * IntegerPart ::\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit Digit*\n *\n * NegativeSign :: -\n *\n * NonZeroDigit :: Digit but not `0`\n *\n * FloatValue ::\n *   - IntegerPart FractionalPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart FractionalPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *\n * FractionalPart :: . Digit+\n *\n * ExponentPart :: ExponentIndicator Sign? Digit+\n *\n * ExponentIndicator :: one of `e` `E`\n *\n * Sign :: one of + -\n * ```\n */\n\nfunction readNumber(lexer, start, firstCode) {\n  const body = lexer.source.body;\n  let position = start;\n  let code = firstCode;\n  let isFloat = false; // NegativeSign (-)\n\n  if (code === 0x002d) {\n    code = body.charCodeAt(++position);\n  } // Zero (0)\n\n  if (code === 0x0030) {\n    code = body.charCodeAt(++position);\n\n    if (isDigit(code)) {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid number, unexpected digit after 0: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  } else {\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // Full stop (.)\n\n  if (code === 0x002e) {\n    isFloat = true;\n    code = body.charCodeAt(++position);\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // E e\n\n  if (code === 0x0045 || code === 0x0065) {\n    isFloat = true;\n    code = body.charCodeAt(++position); // + -\n\n    if (code === 0x002b || code === 0x002d) {\n      code = body.charCodeAt(++position);\n    }\n\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // Numbers cannot be followed by . or NameStart\n\n  if (code === 0x002e || isNameStart(code)) {\n    throw syntaxError(\n      lexer.source,\n      position,\n      `Invalid number, expected digit but got: ${printCodePointAt(\n        lexer,\n        position,\n      )}.`,\n    );\n  }\n\n  return createToken(\n    lexer,\n    isFloat ? TokenKind.FLOAT : TokenKind.INT,\n    start,\n    position,\n    body.slice(start, position),\n  );\n}\n/**\n * Returns the new position in the source after reading one or more digits.\n */\n\nfunction readDigits(lexer, start, firstCode) {\n  if (!isDigit(firstCode)) {\n    throw syntaxError(\n      lexer.source,\n      start,\n      `Invalid number, expected digit but got: ${printCodePointAt(\n        lexer,\n        start,\n      )}.`,\n    );\n  }\n\n  const body = lexer.source.body;\n  let position = start + 1; // +1 to skip first firstCode\n\n  while (isDigit(body.charCodeAt(position))) {\n    ++position;\n  }\n\n  return position;\n}\n/**\n * Reads a single-quote string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"` [lookahead != `\"`]\n *   - `\"` StringCharacter+ `\"`\n *\n * StringCharacter ::\n *   - SourceCharacter but not `\"` or `\\` or LineTerminator\n *   - `\\u` EscapedUnicode\n *   - `\\` EscapedCharacter\n *\n * EscapedUnicode ::\n *   - `{` HexDigit+ `}`\n *   - HexDigit HexDigit HexDigit HexDigit\n *\n * EscapedCharacter :: one of `\"` `\\` `/` `b` `f` `n` `r` `t`\n * ```\n */\n\nfunction readString(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n  let chunkStart = position;\n  let value = '';\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // Closing Quote (\")\n\n    if (code === 0x0022) {\n      value += body.slice(chunkStart, position);\n      return createToken(lexer, TokenKind.STRING, start, position + 1, value);\n    } // Escape Sequence (\\)\n\n    if (code === 0x005c) {\n      value += body.slice(chunkStart, position);\n      const escape =\n        body.charCodeAt(position + 1) === 0x0075 // u\n          ? body.charCodeAt(position + 2) === 0x007b // {\n            ? readEscapedUnicodeVariableWidth(lexer, position)\n            : readEscapedUnicodeFixedWidth(lexer, position)\n          : readEscapedCharacter(lexer, position);\n      value += escape.value;\n      position += escape.size;\n      chunkStart = position;\n      continue;\n    } // LineTerminator (\\n | \\r)\n\n    if (code === 0x000a || code === 0x000d) {\n      break;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid character within String: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  }\n\n  throw syntaxError(lexer.source, position, 'Unterminated string.');\n} // The string value and lexed size of an escape sequence.\n\nfunction readEscapedUnicodeVariableWidth(lexer, position) {\n  const body = lexer.source.body;\n  let point = 0;\n  let size = 3; // Cannot be larger than 12 chars (\\u{00000000}).\n\n  while (size < 12) {\n    const code = body.charCodeAt(position + size++); // Closing Brace (})\n\n    if (code === 0x007d) {\n      // Must be at least 5 chars (\\u{0}) and encode a Unicode scalar value.\n      if (size < 5 || !isUnicodeScalarValue(point)) {\n        break;\n      }\n\n      return {\n        value: String.fromCodePoint(point),\n        size,\n      };\n    } // Append this hex digit to the code point.\n\n    point = (point << 4) | readHexDigit(code);\n\n    if (point < 0) {\n      break;\n    }\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid Unicode escape sequence: \"${body.slice(\n      position,\n      position + size,\n    )}\".`,\n  );\n}\n\nfunction readEscapedUnicodeFixedWidth(lexer, position) {\n  const body = lexer.source.body;\n  const code = read16BitHexCode(body, position + 2);\n\n  if (isUnicodeScalarValue(code)) {\n    return {\n      value: String.fromCodePoint(code),\n      size: 6,\n    };\n  } // GraphQL allows JSON-style surrogate pair escape sequences, but only when\n  // a valid pair is formed.\n\n  if (isLeadingSurrogate(code)) {\n    // \\u\n    if (\n      body.charCodeAt(position + 6) === 0x005c &&\n      body.charCodeAt(position + 7) === 0x0075\n    ) {\n      const trailingCode = read16BitHexCode(body, position + 8);\n\n      if (isTrailingSurrogate(trailingCode)) {\n        // JavaScript defines strings as a sequence of UTF-16 code units and\n        // encodes Unicode code points above U+FFFF using a surrogate pair of\n        // code units. Since this is a surrogate pair escape sequence, just\n        // include both codes into the JavaScript string value. Had JavaScript\n        // not been internally based on UTF-16, then this surrogate pair would\n        // be decoded to retrieve the supplementary code point.\n        return {\n          value: String.fromCodePoint(code, trailingCode),\n          size: 12,\n        };\n      }\n    }\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid Unicode escape sequence: \"${body.slice(position, position + 6)}\".`,\n  );\n}\n/**\n * Reads four hexadecimal characters and returns the positive integer that 16bit\n * hexadecimal string represents. For example, \"000f\" will return 15, and \"dead\"\n * will return 57005.\n *\n * Returns a negative number if any char was not a valid hexadecimal digit.\n */\n\nfunction read16BitHexCode(body, position) {\n  // readHexDigit() returns -1 on error. ORing a negative value with any other\n  // value always produces a negative value.\n  return (\n    (readHexDigit(body.charCodeAt(position)) << 12) |\n    (readHexDigit(body.charCodeAt(position + 1)) << 8) |\n    (readHexDigit(body.charCodeAt(position + 2)) << 4) |\n    readHexDigit(body.charCodeAt(position + 3))\n  );\n}\n/**\n * Reads a hexadecimal character and returns its positive integer value (0-15).\n *\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 if the provided character code was not a valid hexadecimal digit.\n *\n * HexDigit :: one of\n *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`\n *   - `A` `B` `C` `D` `E` `F`\n *   - `a` `b` `c` `d` `e` `f`\n */\n\nfunction readHexDigit(code) {\n  return code >= 0x0030 && code <= 0x0039 // 0-9\n    ? code - 0x0030\n    : code >= 0x0041 && code <= 0x0046 // A-F\n    ? code - 0x0037\n    : code >= 0x0061 && code <= 0x0066 // a-f\n    ? code - 0x0057\n    : -1;\n}\n/**\n * | Escaped Character | Code Point | Character Name               |\n * | ----------------- | ---------- | ---------------------------- |\n * | `\"`               | U+0022     | double quote                 |\n * | `\\`               | U+005C     | reverse solidus (back slash) |\n * | `/`               | U+002F     | solidus (forward slash)      |\n * | `b`               | U+0008     | backspace                    |\n * | `f`               | U+000C     | form feed                    |\n * | `n`               | U+000A     | line feed (new line)         |\n * | `r`               | U+000D     | carriage return              |\n * | `t`               | U+0009     | horizontal tab               |\n */\n\nfunction readEscapedCharacter(lexer, position) {\n  const body = lexer.source.body;\n  const code = body.charCodeAt(position + 1);\n\n  switch (code) {\n    case 0x0022:\n      // \"\n      return {\n        value: '\\u0022',\n        size: 2,\n      };\n\n    case 0x005c:\n      // \\\n      return {\n        value: '\\u005c',\n        size: 2,\n      };\n\n    case 0x002f:\n      // /\n      return {\n        value: '\\u002f',\n        size: 2,\n      };\n\n    case 0x0062:\n      // b\n      return {\n        value: '\\u0008',\n        size: 2,\n      };\n\n    case 0x0066:\n      // f\n      return {\n        value: '\\u000c',\n        size: 2,\n      };\n\n    case 0x006e:\n      // n\n      return {\n        value: '\\u000a',\n        size: 2,\n      };\n\n    case 0x0072:\n      // r\n      return {\n        value: '\\u000d',\n        size: 2,\n      };\n\n    case 0x0074:\n      // t\n      return {\n        value: '\\u0009',\n        size: 2,\n      };\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid character escape sequence: \"${body.slice(\n      position,\n      position + 2,\n    )}\".`,\n  );\n}\n/**\n * Reads a block string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"\"` BlockStringCharacter* `\"\"\"`\n *\n * BlockStringCharacter ::\n *   - SourceCharacter but not `\"\"\"` or `\\\"\"\"`\n *   - `\\\"\"\"`\n * ```\n */\n\nfunction readBlockString(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let lineStart = lexer.lineStart;\n  let position = start + 3;\n  let chunkStart = position;\n  let currentLine = '';\n  const blockLines = [];\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // Closing Triple-Quote (\"\"\")\n\n    if (\n      code === 0x0022 &&\n      body.charCodeAt(position + 1) === 0x0022 &&\n      body.charCodeAt(position + 2) === 0x0022\n    ) {\n      currentLine += body.slice(chunkStart, position);\n      blockLines.push(currentLine);\n      const token = createToken(\n        lexer,\n        TokenKind.BLOCK_STRING,\n        start,\n        position + 3, // Return a string of the lines joined with U+000A.\n        dedentBlockStringLines(blockLines).join('\\n'),\n      );\n      lexer.line += blockLines.length - 1;\n      lexer.lineStart = lineStart;\n      return token;\n    } // Escaped Triple-Quote (\\\"\"\")\n\n    if (\n      code === 0x005c &&\n      body.charCodeAt(position + 1) === 0x0022 &&\n      body.charCodeAt(position + 2) === 0x0022 &&\n      body.charCodeAt(position + 3) === 0x0022\n    ) {\n      currentLine += body.slice(chunkStart, position);\n      chunkStart = position + 1; // skip only slash\n\n      position += 4;\n      continue;\n    } // LineTerminator\n\n    if (code === 0x000a || code === 0x000d) {\n      currentLine += body.slice(chunkStart, position);\n      blockLines.push(currentLine);\n\n      if (code === 0x000d && body.charCodeAt(position + 1) === 0x000a) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      currentLine = '';\n      chunkStart = position;\n      lineStart = position;\n      continue;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid character within String: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  }\n\n  throw syntaxError(lexer.source, position, 'Unterminated string.');\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * ```\n * Name ::\n *   - NameStart NameContinue* [lookahead != NameContinue]\n * ```\n */\n\nfunction readName(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position);\n\n    if (isNameContinue(code)) {\n      ++position;\n    } else {\n      break;\n    }\n  }\n\n  return createToken(\n    lexer,\n    TokenKind.NAME,\n    start,\n    position,\n    body.slice(start, position),\n  );\n}\n","import { inspect } from './inspect.mjs';\n/**\n * A replacement for instanceof which includes an error warning when multi-realm\n * constructors are detected.\n * See: https://expressjs.com/en/advanced/best-practice-performance.html#set-node_env-to-production\n * See: https://webpack.js.org/guides/production/\n */\n\nexport const instanceOf =\n  /* c8 ignore next 6 */\n  // FIXME: https://github.com/graphql/graphql-js/issues/2317\n  globalThis.process && globalThis.process.env.NODE_ENV === 'production'\n    ? function instanceOf(value, constructor) {\n        return value instanceof constructor;\n      }\n    : function instanceOf(value, constructor) {\n        if (value instanceof constructor) {\n          return true;\n        }\n\n        if (typeof value === 'object' && value !== null) {\n          var _value$constructor;\n\n          // Prefer Symbol.toStringTag since it is immune to minification.\n          const className = constructor.prototype[Symbol.toStringTag];\n          const valueClassName = // We still need to support constructor's name to detect conflicts with older versions of this library.\n            Symbol.toStringTag in value // @ts-expect-error TS bug see, https://github.com/microsoft/TypeScript/issues/38009\n              ? value[Symbol.toStringTag]\n              : (_value$constructor = value.constructor) === null ||\n                _value$constructor === void 0\n              ? void 0\n              : _value$constructor.name;\n\n          if (className === valueClassName) {\n            const stringifiedValue = inspect(value);\n            throw new Error(`Cannot use ${className} \"${stringifiedValue}\" from another module or realm.\n\nEnsure that there is only one instance of \"graphql\" in the node_modules\ndirectory. If different versions of \"graphql\" are the dependencies of other\nrelied on modules, use \"resolutions\" to ensure only one version is installed.\n\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\n\nDuplicate \"graphql\" modules cannot be used at the same time since different\nversions may have different capabilities and behavior. The data from one\nversion used in the function from another could produce confusing and\nspurious results.`);\n          }\n        }\n\n        return false;\n      };\n","import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\n\n/**\n * A representation of source input to GraphQL. The `name` and `locationOffset` parameters are\n * optional, but they are useful for clients who store GraphQL documents in source files.\n * For example, if the GraphQL input starts at line 40 in a file named `Foo.graphql`, it might\n * be useful for `name` to be `\"Foo.graphql\"` and location to be `{ line: 40, column: 1 }`.\n * The `line` and `column` properties in `locationOffset` are 1-indexed.\n */\nexport class Source {\n  constructor(\n    body,\n    name = 'GraphQL request',\n    locationOffset = {\n      line: 1,\n      column: 1,\n    },\n  ) {\n    typeof body === 'string' ||\n      devAssert(false, `Body must be a string. Received: ${inspect(body)}.`);\n    this.body = body;\n    this.name = name;\n    this.locationOffset = locationOffset;\n    this.locationOffset.line > 0 ||\n      devAssert(\n        false,\n        'line in locationOffset is 1-indexed and must be positive.',\n      );\n    this.locationOffset.column > 0 ||\n      devAssert(\n        false,\n        'column in locationOffset is 1-indexed and must be positive.',\n      );\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Source';\n  }\n}\n/**\n * Test if the given value is a Source object.\n *\n * @internal\n */\n\nexport function isSource(source) {\n  return instanceOf(source, Source);\n}\n","import { syntaxError } from '../error/syntaxError.mjs';\nimport { Location, OperationTypeNode } from './ast.mjs';\nimport { DirectiveLocation } from './directiveLocation.mjs';\nimport { Kind } from './kinds.mjs';\nimport { isPunctuatorTokenKind, Lexer } from './lexer.mjs';\nimport { isSource, Source } from './source.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  const parser = new Parser(source, options);\n  return parser.parseDocument();\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseValueLiteral(false);\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Similar to parseValue(), but raises a parse error if it encounters a\n * variable. The return type will be a constant value.\n */\n\nexport function parseConstValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseConstValueLiteral();\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const type = parser.parseTypeReference();\n  parser.expectToken(TokenKind.EOF);\n  return type;\n}\n/**\n * This class is exported only to assist people in implementing their own parsers\n * without duplicating too much code and should be used only as last resort for cases\n * such as experimental syntax or if certain features could not be contributed upstream.\n *\n * It is still part of the internal API and is versioned, so any changes to it are never\n * considered breaking changes. If you still need to support multiple versions of the\n * library, please use the `versionInfo` variable for version detection.\n *\n * @internal\n */\n\nexport class Parser {\n  constructor(source, options = {}) {\n    const sourceObj = isSource(source) ? source : new Source(source);\n    this._lexer = new Lexer(sourceObj);\n    this._options = options;\n    this._tokenCounter = 0;\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n  parseName() {\n    const token = this.expectToken(TokenKind.NAME);\n    return this.node(token, {\n      kind: Kind.NAME,\n      value: token.value,\n    });\n  } // Implements the parsing rules in the Document section.\n\n  /**\n   * Document : Definition+\n   */\n\n  parseDocument() {\n    return this.node(this._lexer.token, {\n      kind: Kind.DOCUMENT,\n      definitions: this.many(\n        TokenKind.SOF,\n        this.parseDefinition,\n        TokenKind.EOF,\n      ),\n    });\n  }\n  /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   *\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */\n\n  parseDefinition() {\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } // Many definitions begin with a description and require a lookahead.\n\n    const hasDescription = this.peekDescription();\n    const keywordToken = hasDescription\n      ? this._lexer.lookahead()\n      : this._lexer.token;\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n\n        case 'type':\n          return this.parseObjectTypeDefinition();\n\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n\n        case 'union':\n          return this.parseUnionTypeDefinition();\n\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n\n      if (hasDescription) {\n        throw syntaxError(\n          this._lexer.source,\n          this._lexer.token.start,\n          'Unexpected description, descriptions are supported only on type definitions.',\n        );\n      }\n\n      switch (keywordToken.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n\n        case 'fragment':\n          return this.parseFragmentDefinition();\n\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  } // Implements the parsing rules in the Operations section.\n\n  /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */\n\n  parseOperationDefinition() {\n    const start = this._lexer.token;\n\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.node(start, {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: OperationTypeNode.QUERY,\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    const operation = this.parseOperationType();\n    let name;\n\n    if (this.peek(TokenKind.NAME)) {\n      name = this.parseName();\n    }\n\n    return this.node(start, {\n      kind: Kind.OPERATION_DEFINITION,\n      operation,\n      name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * OperationType : one of query mutation subscription\n   */\n\n  parseOperationType() {\n    const operationToken = this.expectToken(TokenKind.NAME);\n\n    switch (operationToken.value) {\n      case 'query':\n        return OperationTypeNode.QUERY;\n\n      case 'mutation':\n        return OperationTypeNode.MUTATION;\n\n      case 'subscription':\n        return OperationTypeNode.SUBSCRIPTION;\n    }\n\n    throw this.unexpected(operationToken);\n  }\n  /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */\n\n  parseVariableDefinitions() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseVariableDefinition,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */\n\n  parseVariableDefinition() {\n    return this.node(this._lexer.token, {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(TokenKind.EQUALS)\n        ? this.parseConstValueLiteral()\n        : undefined,\n      directives: this.parseConstDirectives(),\n    });\n  }\n  /**\n   * Variable : $ Name\n   */\n\n  parseVariable() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.DOLLAR);\n    return this.node(start, {\n      kind: Kind.VARIABLE,\n      name: this.parseName(),\n    });\n  }\n  /**\n   * ```\n   * SelectionSet : { Selection+ }\n   * ```\n   */\n\n  parseSelectionSet() {\n    return this.node(this._lexer.token, {\n      kind: Kind.SELECTION_SET,\n      selections: this.many(\n        TokenKind.BRACE_L,\n        this.parseSelection,\n        TokenKind.BRACE_R,\n      ),\n    });\n  }\n  /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */\n\n  parseSelection() {\n    return this.peek(TokenKind.SPREAD)\n      ? this.parseFragment()\n      : this.parseField();\n  }\n  /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */\n\n  parseField() {\n    const start = this._lexer.token;\n    const nameOrAlias = this.parseName();\n    let alias;\n    let name;\n\n    if (this.expectOptionalToken(TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n\n    return this.node(start, {\n      kind: Kind.FIELD,\n      alias,\n      name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(TokenKind.BRACE_L)\n        ? this.parseSelectionSet()\n        : undefined,\n    });\n  }\n  /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */\n\n  parseArguments(isConst) {\n    const item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\n  }\n  /**\n   * Argument[Const] : Name : Value[?Const]\n   */\n\n  parseArgument(isConst = false) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.ARGUMENT,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  }\n\n  parseConstArgument() {\n    return this.parseArgument(true);\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */\n\n  parseFragment() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.SPREAD);\n    const hasTypeCondition = this.expectOptionalKeyword('on');\n\n    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */\n\n  parseFragmentDefinition() {\n    const start = this._lexer.token;\n    this.expectKeyword('fragment'); // Legacy support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (this._options.allowLegacyFragmentVariables === true) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentName : Name but not `on`\n   */\n\n  parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseValueLiteral(isConst) {\n    const token = this._lexer.token;\n\n    switch (token.kind) {\n      case TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n\n      case TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n\n      case TokenKind.INT:\n        this.advanceLexer();\n        return this.node(token, {\n          kind: Kind.INT,\n          value: token.value,\n        });\n\n      case TokenKind.FLOAT:\n        this.advanceLexer();\n        return this.node(token, {\n          kind: Kind.FLOAT,\n          value: token.value,\n        });\n\n      case TokenKind.STRING:\n      case TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n\n      case TokenKind.NAME:\n        this.advanceLexer();\n\n        switch (token.value) {\n          case 'true':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: true,\n            });\n\n          case 'false':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: false,\n            });\n\n          case 'null':\n            return this.node(token, {\n              kind: Kind.NULL,\n            });\n\n          default:\n            return this.node(token, {\n              kind: Kind.ENUM,\n              value: token.value,\n            });\n        }\n\n      case TokenKind.DOLLAR:\n        if (isConst) {\n          this.expectToken(TokenKind.DOLLAR);\n\n          if (this._lexer.token.kind === TokenKind.NAME) {\n            const varName = this._lexer.token.value;\n            throw syntaxError(\n              this._lexer.source,\n              token.start,\n              `Unexpected variable \"$${varName}\" in constant value.`,\n            );\n          } else {\n            throw this.unexpected(token);\n          }\n        }\n\n        return this.parseVariable();\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseConstValueLiteral() {\n    return this.parseValueLiteral(true);\n  }\n\n  parseStringLiteral() {\n    const token = this._lexer.token;\n    this.advanceLexer();\n    return this.node(token, {\n      kind: Kind.STRING,\n      value: token.value,\n      block: token.kind === TokenKind.BLOCK_STRING,\n    });\n  }\n  /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */\n\n  parseList(isConst) {\n    const item = () => this.parseValueLiteral(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.LIST,\n      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n    });\n  }\n  /**\n   * ```\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   * ```\n   */\n\n  parseObject(isConst) {\n    const item = () => this.parseObjectField(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.OBJECT,\n      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),\n    });\n  }\n  /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */\n\n  parseObjectField(isConst) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.OBJECT_FIELD,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  } // Implements the parsing rules in the Directives section.\n\n  /**\n   * Directives[Const] : Directive[?Const]+\n   */\n\n  parseDirectives(isConst) {\n    const directives = [];\n\n    while (this.peek(TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n\n    return directives;\n  }\n\n  parseConstDirectives() {\n    return this.parseDirectives(true);\n  }\n  /**\n   * ```\n   * Directive[Const] : @ Name Arguments[?Const]?\n   * ```\n   */\n\n  parseDirective(isConst) {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.AT);\n    return this.node(start, {\n      kind: Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst),\n    });\n  } // Implements the parsing rules in the Types section.\n\n  /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */\n\n  parseTypeReference() {\n    const start = this._lexer.token;\n    let type;\n\n    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\n      const innerType = this.parseTypeReference();\n      this.expectToken(TokenKind.BRACKET_R);\n      type = this.node(start, {\n        kind: Kind.LIST_TYPE,\n        type: innerType,\n      });\n    } else {\n      type = this.parseNamedType();\n    }\n\n    if (this.expectOptionalToken(TokenKind.BANG)) {\n      return this.node(start, {\n        kind: Kind.NON_NULL_TYPE,\n        type,\n      });\n    }\n\n    return type;\n  }\n  /**\n   * NamedType : Name\n   */\n\n  parseNamedType() {\n    return this.node(this._lexer.token, {\n      kind: Kind.NAMED_TYPE,\n      name: this.parseName(),\n    });\n  } // Implements the parsing rules in the Type Definition section.\n\n  peekDescription() {\n    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\n  }\n  /**\n   * Description : StringValue\n   */\n\n  parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\n   * ```\n   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }\n   * ```\n   */\n\n  parseSchemaDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.many(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n    return this.node(start, {\n      kind: Kind.SCHEMA_DEFINITION,\n      description,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */\n\n  parseOperationTypeDefinition() {\n    const start = this._lexer.token;\n    const operation = this.parseOperationType();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseNamedType();\n    return this.node(start, {\n      kind: Kind.OPERATION_TYPE_DEFINITION,\n      operation,\n      type,\n    });\n  }\n  /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */\n\n  parseScalarTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */\n\n  parseObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */\n\n  parseImplementsInterfaces() {\n    return this.expectOptionalKeyword('implements')\n      ? this.delimitedMany(TokenKind.AMP, this.parseNamedType)\n      : [];\n  }\n  /**\n   * ```\n   * FieldsDefinition : { FieldDefinition+ }\n   * ```\n   */\n\n  parseFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseFieldDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */\n\n  parseFieldDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.FIELD_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      type,\n      directives,\n    });\n  }\n  /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */\n\n  parseArgumentDefs() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseInputValueDef,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */\n\n  parseInputValueDef() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    let defaultValue;\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      defaultValue = this.parseConstValueLiteral();\n    }\n\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      description,\n      name,\n      type,\n      defaultValue,\n      directives,\n    });\n  }\n  /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */\n\n  parseInterfaceTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */\n\n  parseUnionTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */\n\n  parseUnionMemberTypes() {\n    return this.expectOptionalToken(TokenKind.EQUALS)\n      ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType)\n      : [];\n  }\n  /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */\n\n  parseEnumTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * ```\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   * ```\n   */\n\n  parseEnumValuesDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseEnumValueDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   */\n\n  parseEnumValueDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseEnumValueName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.ENUM_VALUE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseEnumValueName() {\n    if (\n      this._lexer.token.value === 'true' ||\n      this._lexer.token.value === 'false' ||\n      this._lexer.token.value === 'null'\n    ) {\n      throw syntaxError(\n        this._lexer.source,\n        this._lexer.token.start,\n        `${getTokenDesc(\n          this._lexer.token,\n        )} is reserved and cannot be used for an enum value.`,\n      );\n    }\n\n    return this.parseName();\n  }\n  /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */\n\n  parseInputObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   * ```\n   */\n\n  parseInputFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseInputValueDef,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */\n\n  parseTypeSystemExtension() {\n    const keywordToken = this._lexer.lookahead();\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n\n        case 'type':\n          return this.parseObjectTypeExtension();\n\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n\n        case 'union':\n          return this.parseUnionTypeExtension();\n\n        case 'enum':\n          return this.parseEnumTypeExtension();\n\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  }\n  /**\n   * ```\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   * ```\n   */\n\n  parseSchemaExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCHEMA_EXTENSION,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */\n\n  parseScalarTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_EXTENSION,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */\n\n  parseObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * InterfaceTypeExtension :\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]\n   *  - extend interface Name ImplementsInterfaces\n   */\n\n  parseInterfaceTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */\n\n  parseUnionTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_EXTENSION,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */\n\n  parseEnumTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_EXTENSION,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */\n\n  parseInputObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   * ```\n   */\n\n  parseDirectiveDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(TokenKind.AT);\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    const repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    const locations = this.parseDirectiveLocations();\n    return this.node(start, {\n      kind: Kind.DIRECTIVE_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      repeatable,\n      locations,\n    });\n  }\n  /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */\n\n  parseDirectiveLocations() {\n    return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);\n  }\n  /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */\n\n  parseDirectiveLocation() {\n    const start = this._lexer.token;\n    const name = this.parseName();\n\n    if (Object.prototype.hasOwnProperty.call(DirectiveLocation, name.value)) {\n      return name;\n    }\n\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\n   * Returns a node that, if configured to do so, sets a \"loc\" field as a\n   * location object, used to identify the place in the source that created a\n   * given parsed object.\n   */\n\n  node(startToken, node) {\n    if (this._options.noLocation !== true) {\n      node.loc = new Location(\n        startToken,\n        this._lexer.lastToken,\n        this._lexer.source,\n      );\n    }\n\n    return node;\n  }\n  /**\n   * Determines if the next token is of a given kind\n   */\n\n  peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this.advanceLexer();\n      return token;\n    }\n\n    throw syntaxError(\n      this._lexer.source,\n      token.start,\n      `Expected ${getTokenKindDesc(kind)}, found ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * If the next token is of the given kind, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this.advanceLexer();\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this.advanceLexer();\n    } else {\n      throw syntaxError(\n        this._lexer.source,\n        token.start,\n        `Expected \"${value}\", found ${getTokenDesc(token)}.`,\n      );\n    }\n  }\n  /**\n   * If the next token is a given keyword, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this.advanceLexer();\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Helper function for creating an error when an unexpected lexed token is encountered.\n   */\n\n  unexpected(atToken) {\n    const token =\n      atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;\n    return syntaxError(\n      this._lexer.source,\n      token.start,\n      `Unexpected ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * Returns a possibly empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n\n    return nodes;\n  }\n  /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always return non-empty list\n   * that begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      const nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n\n      return nodes;\n    }\n\n    return [];\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n\n    return nodes;\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.\n   * Advances the parser to the next lex token after last item in the list.\n   */\n\n  delimitedMany(delimiterKind, parseFn) {\n    this.expectOptionalToken(delimiterKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (this.expectOptionalToken(delimiterKind));\n\n    return nodes;\n  }\n\n  advanceLexer() {\n    const { maxTokens } = this._options;\n\n    const token = this._lexer.advance();\n\n    if (maxTokens !== undefined && token.kind !== TokenKind.EOF) {\n      ++this._tokenCounter;\n\n      if (this._tokenCounter > maxTokens) {\n        throw syntaxError(\n          this._lexer.source,\n          token.start,\n          `Document contains more that ${maxTokens} tokens. Parsing aborted.`,\n        );\n      }\n    }\n  }\n}\n/**\n * A helper function to describe a token as a string for debugging.\n */\n\nfunction getTokenDesc(token) {\n  const value = token.value;\n  return getTokenKindDesc(token.kind) + (value != null ? ` \"${value}\"` : '');\n}\n/**\n * A helper function to describe a token kind as a string for debugging.\n */\n\nfunction getTokenKindDesc(kind) {\n  return isPunctuatorTokenKind(kind) ? `\"${kind}\"` : kind;\n}\n","import { parse } from 'graphql';\n\nimport {\n  DocumentNode,\n  DefinitionNode,\n  Location,\n} from 'graphql/language/ast';\n\n// A map docString -> graphql document\nconst docCache = new Map<string, DocumentNode>();\n\n// A map fragmentName -> [normalized source]\nconst fragmentSourceMap = new Map<string, Set<string>>();\n\nlet printFragmentWarnings = true;\nlet experimentalFragmentVariables = false;\n\n// Strip insignificant whitespace\n// Note that this could do a lot more, such as reorder fields etc.\nfunction normalize(string: string) {\n  return string.replace(/[\\s,]+/g, ' ').trim();\n}\n\nfunction cacheKeyFromLoc(loc: Location) {\n  return normalize(loc.source.body.substring(loc.start, loc.end));\n}\n\n// Take a unstripped parsed document (query/mutation or even fragment), and\n// check all fragment definitions, checking for name->source uniqueness.\n// We also want to make sure only unique fragments exist in the document.\nfunction processFragments(ast: DocumentNode) {\n  const seenKeys = new Set<string>();\n  const definitions: DefinitionNode[] = [];\n\n  ast.definitions.forEach(fragmentDefinition => {\n    if (fragmentDefinition.kind === 'FragmentDefinition') {\n      var fragmentName = fragmentDefinition.name.value;\n      var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc!);\n\n      // We know something about this fragment\n      let sourceKeySet = fragmentSourceMap.get(fragmentName)!;\n      if (sourceKeySet && !sourceKeySet.has(sourceKey)) {\n        // this is a problem because the app developer is trying to register another fragment with\n        // the same name as one previously registered. So, we tell them about it.\n        if (printFragmentWarnings) {\n          console.warn(\"Warning: fragment with name \" + fragmentName + \" already exists.\\n\"\n            + \"graphql-tag enforces all fragment names across your application to be unique; read more about\\n\"\n            + \"this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names\");\n        }\n      } else if (!sourceKeySet) {\n        fragmentSourceMap.set(fragmentName, sourceKeySet = new Set);\n      }\n\n      sourceKeySet.add(sourceKey);\n\n      if (!seenKeys.has(sourceKey)) {\n        seenKeys.add(sourceKey);\n        definitions.push(fragmentDefinition);\n      }\n    } else {\n      definitions.push(fragmentDefinition);\n    }\n  });\n\n  return {\n    ...ast,\n    definitions,\n  };\n}\n\nfunction stripLoc(doc: DocumentNode) {\n  const workSet = new Set<Record<string, any>>(doc.definitions);\n\n  workSet.forEach(node => {\n    if (node.loc) delete node.loc;\n    Object.keys(node).forEach(key => {\n      const value = node[key];\n      if (value && typeof value === 'object') {\n        workSet.add(value);\n      }\n    });\n  });\n\n  const loc = doc.loc as Record<string, any>;\n  if (loc) {\n    delete loc.startToken;\n    delete loc.endToken;\n  }\n\n  return doc;\n}\n\nfunction parseDocument(source: string) {\n  var cacheKey = normalize(source);\n  if (!docCache.has(cacheKey)) {\n    const parsed = parse(source, {\n      experimentalFragmentVariables,\n      allowLegacyFragmentVariables: experimentalFragmentVariables,\n    } as any);\n    if (!parsed || parsed.kind !== 'Document') {\n      throw new Error('Not a valid GraphQL document.');\n    }\n    docCache.set(\n      cacheKey,\n      // check that all \"new\" fragments inside the documents are consistent with\n      // existing fragments of the same name\n      stripLoc(processFragments(parsed)),\n    );\n  }\n  return docCache.get(cacheKey)!;\n}\n\n// XXX This should eventually disallow arbitrary string interpolation, like Relay does\nexport function gql(\n  literals: string | readonly string[],\n  ...args: any[]\n) {\n\n  if (typeof literals === 'string') {\n    literals = [literals];\n  }\n\n  let result = literals[0];\n\n  args.forEach((arg, i) => {\n    if (arg && arg.kind === 'Document') {\n      result += arg.loc.source.body;\n    } else {\n      result += arg;\n    }\n    result += literals[i + 1];\n  });\n\n  return parseDocument(result);\n}\n\nexport function resetCaches() {\n  docCache.clear();\n  fragmentSourceMap.clear();\n}\n\nexport function disableFragmentWarnings() {\n  printFragmentWarnings = false;\n}\n\nexport function enableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = true;\n}\n\nexport function disableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = false;\n}\n\nconst extras = {\n  gql,\n  resetCaches,\n  disableFragmentWarnings,\n  enableExperimentalFragmentVariables,\n  disableExperimentalFragmentVariables,\n};\n\nexport namespace gql {\n  export const {\n    gql,\n    resetCaches,\n    disableFragmentWarnings,\n    enableExperimentalFragmentVariables,\n    disableExperimentalFragmentVariables,\n  } = extras;\n}\n\ngql.default = gql;\n\nexport default gql;\n","import { invariant } from \"../../utilities/globals/index.js\";\nimport * as React from \"rehackt\";\n\nimport { canUseLayoutEffect } from \"../../utilities/index.js\";\n\nlet didWarnUncachedGetSnapshot = false;\n\ntype RealUseSESHookType =\n  // This import depends only on the @types/use-sync-external-store package, not\n  // the actual use-sync-external-store package, which is not installed. It\n  // might be nice to get this type from React 18, but it still needs to work\n  // when only React 17 or earlier is installed.\n  typeof import(\"use-sync-external-store\").useSyncExternalStore;\n\n// Prevent webpack from complaining about our feature detection of the\n// useSyncExternalStore property of the React namespace, which is expected not\n// to exist when using React 17 and earlier, and that's fine.\nconst uSESKey = \"useSyncExternalStore\" as keyof typeof React;\nconst realHook = React[uSESKey] as RealUseSESHookType | undefined;\n\n// Adapted from https://www.npmjs.com/package/use-sync-external-store, with\n// Apollo Client deviations called out by \"// DEVIATION ...\" comments.\n\n// When/if React.useSyncExternalStore is defined, delegate fully to it.\nexport const useSyncExternalStore: RealUseSESHookType =\n  realHook ||\n  ((subscribe, getSnapshot, getServerSnapshot) => {\n    // Read the current snapshot from the store on every render. Again, this\n    // breaks the rules of React, and only works here because of specific\n    // implementation details, most importantly that updates are\n    // always synchronous.\n    const value = getSnapshot();\n    if (\n      // DEVIATION: Using __DEV__\n      __DEV__ &&\n      !didWarnUncachedGetSnapshot &&\n      // DEVIATION: Not using Object.is because we know our snapshots will never\n      // be exotic primitive values like NaN, which is !== itself.\n      value !== getSnapshot()\n    ) {\n      didWarnUncachedGetSnapshot = true;\n      // DEVIATION: Using invariant.error instead of console.error directly.\n      invariant.error(\n        \"The result of getSnapshot should be cached to avoid an infinite loop\"\n      );\n    }\n\n    // Because updates are synchronous, we don't queue them. Instead we force a\n    // re-render whenever the subscribed state changes by updating an some\n    // arbitrary useState hook. Then, during render, we call getSnapshot to read\n    // the current value.\n    //\n    // Because we don't actually use the state returned by the useState hook, we\n    // can save a bit of memory by storing other stuff in that slot.\n    //\n    // To implement the early bailout, we need to track some things on a mutable\n    // object. Usually, we would put that in a useRef hook, but we can stash it in\n    // our useState hook instead.\n    //\n    // To force a re-render, we call forceUpdate({inst}). That works because the\n    // new object always fails an equality check.\n    const [{ inst }, forceUpdate] = React.useState({\n      inst: { value, getSnapshot },\n    });\n\n    // Track the latest getSnapshot function with a ref. This needs to be updated\n    // in the layout phase so we can access it during the tearing check that\n    // happens on subscribe.\n    if (canUseLayoutEffect) {\n      // DEVIATION: We avoid calling useLayoutEffect when !canUseLayoutEffect,\n      // which may seem like a conditional hook, but this code ends up behaving\n      // unconditionally (one way or the other) because canUseLayoutEffect is\n      // constant.\n      React.useLayoutEffect(() => {\n        Object.assign(inst, { value, getSnapshot });\n        // Whenever getSnapshot or subscribe changes, we need to check in the\n        // commit phase if there was an interleaved mutation. In concurrent mode\n        // this can happen all the time, but even in synchronous mode, an earlier\n        // effect may have mutated the store.\n        if (checkIfSnapshotChanged(inst)) {\n          // Force a re-render.\n          forceUpdate({ inst });\n        }\n      }, [subscribe, value, getSnapshot]);\n    } else {\n      Object.assign(inst, { value, getSnapshot });\n    }\n\n    React.useEffect(() => {\n      // Check for changes right before subscribing. Subsequent changes will be\n      // detected in the subscription handler.\n      if (checkIfSnapshotChanged(inst)) {\n        // Force a re-render.\n        forceUpdate({ inst });\n      }\n\n      // Subscribe to the store and return a clean-up function.\n      return subscribe(function handleStoreChange() {\n        // TODO: Because there is no cross-renderer API for batching updates, it's\n        // up to the consumer of this library to wrap their subscription event\n        // with unstable_batchedUpdates. Should we try to detect when this isn't\n        // the case and print a warning in development?\n\n        // The store changed. Check if the snapshot changed since the last time we\n        // read from the store.\n        if (checkIfSnapshotChanged(inst)) {\n          // Force a re-render.\n          forceUpdate({ inst });\n        }\n      });\n    }, [subscribe]);\n\n    return value;\n  });\n\nfunction checkIfSnapshotChanged<Snapshot>({\n  value,\n  getSnapshot,\n}: {\n  value: Snapshot;\n  getSnapshot: () => Snapshot;\n}): boolean {\n  try {\n    return value !== getSnapshot();\n  } catch {\n    return true;\n  }\n}\n","import { invariant } from \"../../utilities/globals/index.js\";\n\nimport type {\n  DocumentNode,\n  DefinitionNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode,\n} from \"graphql\";\nimport {\n  AutoCleanedWeakCache,\n  cacheSizes,\n  defaultCacheSizes,\n} from \"../../utilities/index.js\";\nimport { registerGlobalCache } from \"../../utilities/caching/getMemoryInternals.js\";\n\nexport enum DocumentType {\n  Query,\n  Mutation,\n  Subscription,\n}\n\nexport interface IDocumentDefinition {\n  type: DocumentType;\n  name: string;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\nlet cache:\n  | undefined\n  | AutoCleanedWeakCache<\n      DocumentNode,\n      {\n        name: string;\n        type: DocumentType;\n        variables: readonly VariableDefinitionNode[];\n      }\n    >;\n\nexport function operationName(type: DocumentType) {\n  let name;\n  switch (type) {\n    case DocumentType.Query:\n      name = \"Query\";\n      break;\n    case DocumentType.Mutation:\n      name = \"Mutation\";\n      break;\n    case DocumentType.Subscription:\n      name = \"Subscription\";\n      break;\n  }\n  return name;\n}\n\n// This parser is mostly used to safety check incoming documents.\nexport function parser(document: DocumentNode): IDocumentDefinition {\n  if (!cache) {\n    cache = new AutoCleanedWeakCache(\n      cacheSizes.parser || defaultCacheSizes.parser\n    );\n  }\n  const cached = cache.get(document);\n  if (cached) return cached;\n\n  let variables, type, name;\n\n  invariant(\n    !!document && !!document.kind,\n    `Argument of %s passed to parser was not a valid GraphQL ` +\n      `DocumentNode. You may need to use 'graphql-tag' or another method ` +\n      `to convert your operation into a document`,\n    document\n  );\n\n  const fragments: DefinitionNode[] = [];\n  const queries: DefinitionNode[] = [];\n  const mutations: DefinitionNode[] = [];\n  const subscriptions: DefinitionNode[] = [];\n\n  for (const x of document.definitions) {\n    if (x.kind === \"FragmentDefinition\") {\n      fragments.push(x);\n      continue;\n    }\n\n    if (x.kind === \"OperationDefinition\") {\n      switch (x.operation) {\n        case \"query\":\n          queries.push(x);\n          break;\n        case \"mutation\":\n          mutations.push(x);\n          break;\n        case \"subscription\":\n          subscriptions.push(x);\n          break;\n      }\n    }\n  }\n\n  invariant(\n    !fragments.length ||\n      queries.length ||\n      mutations.length ||\n      subscriptions.length,\n    `Passing only a fragment to 'graphql' is not yet supported. ` +\n      `You must include a query, subscription or mutation as well`\n  );\n\n  invariant(\n    queries.length + mutations.length + subscriptions.length <= 1,\n    `react-apollo only supports a query, subscription, or a mutation per HOC. ` +\n      `%s had %s queries, %s ` +\n      `subscriptions and %s mutations. ` +\n      `You can use 'compose' to join multiple operation types to a component`,\n    document,\n    queries.length,\n    subscriptions.length,\n    mutations.length\n  );\n\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n\n  const definitions =\n    queries.length ? queries\n    : mutations.length ? mutations\n    : subscriptions;\n\n  invariant(\n    definitions.length === 1,\n    `react-apollo only supports one definition per HOC. %s had ` +\n      `%s definitions. ` +\n      `You can use 'compose' to join multiple operation types to a component`,\n    document,\n    definitions.length\n  );\n\n  const definition = definitions[0] as OperationDefinitionNode;\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === \"Name\") {\n    name = definition.name.value;\n  } else {\n    name = \"data\"; // fallback to using data if no name\n  }\n\n  const payload = { name, type, variables };\n  cache.set(document, payload);\n  return payload;\n}\n\nparser.resetCache = () => {\n  cache = undefined;\n};\n\nif (__DEV__) {\n  registerGlobalCache(\"parser\", () => (cache ? cache.size : 0));\n}\n\nexport function verifyDocumentType(document: DocumentNode, type: DocumentType) {\n  const operation = parser(document);\n  const requiredOperationName = operationName(type);\n  const usedOperationName = operationName(operation.type);\n  invariant(\n    operation.type === type,\n    `Running a %s requires a graphql ` + `%s, but a %s was used instead.`,\n    requiredOperationName,\n    requiredOperationName,\n    usedOperationName\n  );\n}\n","import { invariant } from \"../../utilities/globals/index.js\";\nimport * as React from \"rehackt\";\nimport type { ApolloClient } from \"../../core/index.js\";\nimport { getApolloContext } from \"../context/index.js\";\n\n/**\n * @example\n * ```jsx\n * import { useApolloClient } from '@apollo/client';\n *\n * function SomeComponent() {\n *   const client = useApolloClient();\n *   // `client` is now set to the `ApolloClient` instance being used by the\n *   // application (that was configured using something like `ApolloProvider`)\n * }\n * ```\n *\n * @since 3.0.0\n * @returns The `ApolloClient` instance being used by the application.\n */\nexport function useApolloClient(\n  override?: ApolloClient<object>\n): ApolloClient<object> {\n  const context = React.useContext(getApolloContext());\n  const client = override || context.client;\n  invariant(\n    !!client,\n    'Could not find \"client\" in the context or passed in as an option. ' +\n      \"Wrap the root component in an <ApolloProvider>, or pass an ApolloClient \" +\n      \"instance in via options.\"\n  );\n\n  return client;\n}\n","import type {\n  useQuery,\n  useSuspenseQuery,\n  useBackgroundQuery,\n  useReadQuery,\n  useFragment,\n} from \"../index.js\";\nimport type { QueryManager } from \"../../../core/QueryManager.js\";\nimport type { ApolloClient } from \"../../../core/ApolloClient.js\";\nimport type { ObservableQuery } from \"../../../core/ObservableQuery.js\";\n\nconst wrapperSymbol = Symbol.for(\"apollo.hook.wrappers\");\n\ninterface WrappableHooks {\n  useQuery: typeof useQuery;\n  useSuspenseQuery: typeof useSuspenseQuery;\n  useBackgroundQuery: typeof useBackgroundQuery;\n  useReadQuery: typeof useReadQuery;\n  useFragment: typeof useFragment;\n}\n\n/**\n * @internal\n * Can be used to correctly type the [Symbol.for(\"apollo.hook.wrappers\")] property of\n * `QueryManager`, to override/wrap hook functionality.\n */\nexport type HookWrappers = {\n  [K in keyof WrappableHooks]?: (\n    originalHook: WrappableHooks[K]\n  ) => WrappableHooks[K];\n};\n\ninterface QueryManagerWithWrappers<T> extends QueryManager<T> {\n  [wrapperSymbol]?: HookWrappers;\n}\n\n/**\n * @internal\n *\n * Makes an Apollo Client hook \"wrappable\".\n * That means that the Apollo Client instance can expose a \"wrapper\" that will be\n * used to wrap the original hook implementation with additional logic.\n * @example\n * ```tsx\n * // this is already done in `@apollo/client` for all wrappable hooks (see `WrappableHooks`)\n * // following this pattern\n * function useQuery() {\n *   return wrapHook('useQuery', _useQuery, options.client)(query, options);\n * }\n * function _useQuery(query, options) {\n *   // original implementation\n * }\n *\n * // this is what a library like `@apollo/client-react-streaming` would do\n * class ApolloClientWithStreaming extends ApolloClient {\n *   constructor(options) {\n *     super(options);\n *     this.queryManager[Symbol.for(\"apollo.hook.wrappers\")] = {\n *       useQuery: (original) => (query, options) => {\n *         console.log(\"useQuery was called with options\", options);\n *         return original(query, options);\n *       }\n *     }\n *   }\n * }\n *\n * // this will now log the options and then call the original `useQuery`\n * const client = new ApolloClientWithStreaming({ ... });\n * useQuery(query, { client });\n * ```\n */\nexport function wrapHook<Hook extends (...args: any[]) => any>(\n  hookName: keyof WrappableHooks,\n  useHook: Hook,\n  clientOrObsQuery: ObservableQuery<any> | ApolloClient<any>\n): Hook {\n  const queryManager = (\n    clientOrObsQuery as unknown as {\n      // both `ApolloClient` and `ObservableQuery` have a `queryManager` property\n      // but they're both `private`, so we have to cast around for a bit here.\n      queryManager: QueryManagerWithWrappers<any>;\n    }\n  )[\"queryManager\"];\n  const wrappers = queryManager && queryManager[wrapperSymbol];\n  const wrapper: undefined | ((wrap: Hook) => Hook) =\n    wrappers && (wrappers[hookName] as any);\n  return wrapper ? wrapper(useHook) : useHook;\n}\n","import { invariant } from \"../../utilities/globals/index.js\";\n\nimport * as React from \"rehackt\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport { equal } from \"@wry/equality\";\n\nimport type {\n  OperationVariables,\n  WatchQueryFetchPolicy,\n} from \"../../core/index.js\";\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport type { ApolloContextValue } from \"../context/index.js\";\nimport { getApolloContext } from \"../context/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport type {\n  ApolloClient,\n  ApolloQueryResult,\n  ObservableQuery,\n  DocumentNode,\n  TypedDocumentNode,\n  WatchQueryOptions,\n} from \"../../core/index.js\";\nimport { NetworkStatus } from \"../../core/index.js\";\nimport type {\n  QueryHookOptions,\n  QueryResult,\n  ObservableQueryFields,\n  NoInfer,\n} from \"../types/types.js\";\n\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport {\n  canUseWeakMap,\n  compact,\n  isNonEmptyArray,\n  maybeDeepFreeze,\n} from \"../../utilities/index.js\";\nimport { wrapHook } from \"./internal/index.js\";\n\nconst {\n  prototype: { hasOwnProperty },\n} = Object;\n\n/**\n * A hook for executing queries in an Apollo application.\n *\n * To run a query within a React component, call `useQuery` and pass it a GraphQL query document.\n *\n * When your component renders, `useQuery` returns an object from Apollo Client that contains `loading`, `error`, and `data` properties you can use to render your UI.\n *\n * > Refer to the [Queries](https://www.apollographql.com/docs/react/data/queries) section for a more in-depth overview of `useQuery`.\n *\n * @example\n * ```jsx\n * import { gql, useQuery } from '@apollo/client';\n *\n * const GET_GREETING = gql`\n *   query GetGreeting($language: String!) {\n *     greeting(language: $language) {\n *       message\n *     }\n *   }\n * `;\n *\n * function Hello() {\n *   const { loading, error, data } = useQuery(GET_GREETING, {\n *     variables: { language: 'english' },\n *   });\n *   if (loading) return <p>Loading ...</p>;\n *   return <h1>Hello {data.greeting.message}!</h1>;\n * }\n * ```\n * @since 3.0.0\n * @param query - A GraphQL query document parsed into an AST by `gql`.\n * @param options - Options to control how the query is executed.\n * @returns Query result object\n */\nexport function useQuery<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: QueryHookOptions<\n    NoInfer<TData>,\n    NoInfer<TVariables>\n  > = Object.create(null)\n): QueryResult<TData, TVariables> {\n  return wrapHook(\n    \"useQuery\",\n    _useQuery,\n    useApolloClient(options && options.client)\n  )(query, options);\n}\n\nfunction _useQuery<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: QueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>\n) {\n  return useInternalState(useApolloClient(options.client), query).useQuery(\n    options\n  );\n}\n\nexport function useInternalState<TData, TVariables extends OperationVariables>(\n  client: ApolloClient<any>,\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>\n): InternalState<TData, TVariables> {\n  const stateRef = React.useRef<InternalState<TData, TVariables>>();\n  if (\n    !stateRef.current ||\n    client !== stateRef.current.client ||\n    query !== stateRef.current.query\n  ) {\n    stateRef.current = new InternalState(client, query, stateRef.current);\n  }\n  const state = stateRef.current;\n\n  // By default, InternalState.prototype.forceUpdate is an empty function, but\n  // we replace it here (before anyone has had a chance to see this state yet)\n  // with a function that unconditionally forces an update, using the latest\n  // setTick function. Updating this state by calling state.forceUpdate is the\n  // only way we trigger React component updates (no other useState calls within\n  // the InternalState class).\n  state.forceUpdateState = React.useReducer((tick) => tick + 1, 0)[1];\n\n  return state;\n}\n\nclass InternalState<TData, TVariables extends OperationVariables> {\n  constructor(\n    public readonly client: ReturnType<typeof useApolloClient>,\n    public readonly query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n    previous?: InternalState<TData, TVariables>\n  ) {\n    verifyDocumentType(query, DocumentType.Query);\n\n    // Reuse previousData from previous InternalState (if any) to provide\n    // continuity of previousData even if/when the query or client changes.\n    const previousResult = previous && previous.result;\n    const previousData = previousResult && previousResult.data;\n    if (previousData) {\n      this.previousData = previousData;\n    }\n  }\n\n  /**\n   * Forces an update using local component state.\n   * As this is not batched with `useSyncExternalStore` updates,\n   * this is only used as a fallback if the `useSyncExternalStore` \"force update\"\n   * method is not registered at the moment.\n   * See https://github.com/facebook/react/issues/25191\n   *  */\n  forceUpdateState() {\n    // Replaced (in useInternalState) with a method that triggers an update.\n    invariant.warn(\n      \"Calling default no-op implementation of InternalState#forceUpdate\"\n    );\n  }\n\n  /**\n   * Will be overwritten by the `useSyncExternalStore` \"force update\" method\n   * whenever it is available and reset to `forceUpdateState` when it isn't.\n   */\n  forceUpdate = () => this.forceUpdateState();\n\n  executeQuery(\n    options: QueryHookOptions<TData, TVariables> & {\n      query?: DocumentNode;\n    }\n  ) {\n    if (options.query) {\n      Object.assign(this, { query: options.query });\n    }\n\n    this.watchQueryOptions = this.createWatchQueryOptions(\n      (this.queryHookOptions = options)\n    );\n\n    const concast = this.observable.reobserveAsConcast(\n      this.getObsQueryOptions()\n    );\n\n    // Make sure getCurrentResult returns a fresh ApolloQueryResult<TData>,\n    // but save the current data as this.previousData, just like setResult\n    // usually does.\n    this.previousData = this.result?.data || this.previousData;\n    this.result = void 0;\n    this.forceUpdate();\n\n    return new Promise<QueryResult<TData, TVariables>>((resolve) => {\n      let result: ApolloQueryResult<TData>;\n\n      // Subscribe to the concast independently of the ObservableQuery in case\n      // the component gets unmounted before the promise resolves. This prevents\n      // the concast from terminating early and resolving with `undefined` when\n      // there are no more subscribers for the concast.\n      concast.subscribe({\n        next: (value) => {\n          result = value;\n        },\n        error: () => {\n          resolve(this.toQueryResult(this.observable.getCurrentResult()));\n        },\n        complete: () => {\n          resolve(this.toQueryResult(result));\n        },\n      });\n    });\n  }\n\n  // Methods beginning with use- should be called according to the standard\n  // rules of React hooks: only at the top level of the calling function, and\n  // without any dynamic conditional logic.\n  useQuery(options: QueryHookOptions<TData, TVariables>) {\n    // The renderPromises field gets initialized here in the useQuery method, at\n    // the beginning of everything (for a given component rendering, at least),\n    // so we can safely use this.renderPromises in other/later InternalState\n    // methods without worrying it might be uninitialized. Even after\n    // initialization, this.renderPromises is usually undefined (unless SSR is\n    // happening), but that's fine as long as it has been initialized that way,\n    // rather than left uninitialized.\n    this.renderPromises = React.useContext(getApolloContext()).renderPromises;\n\n    this.useOptions(options);\n\n    const obsQuery = this.useObservableQuery();\n\n    const result = useSyncExternalStore(\n      React.useCallback(\n        (handleStoreChange) => {\n          if (this.renderPromises) {\n            return () => {};\n          }\n\n          this.forceUpdate = handleStoreChange;\n\n          const onNext = () => {\n            const previousResult = this.result;\n            // We use `getCurrentResult()` instead of the onNext argument because\n            // the values differ slightly. Specifically, loading results will have\n            // an empty object for data instead of `undefined` for some reason.\n            const result = obsQuery.getCurrentResult();\n            // Make sure we're not attempting to re-render similar results\n            if (\n              previousResult &&\n              previousResult.loading === result.loading &&\n              previousResult.networkStatus === result.networkStatus &&\n              equal(previousResult.data, result.data)\n            ) {\n              return;\n            }\n\n            this.setResult(result);\n          };\n\n          const onError = (error: Error) => {\n            subscription.unsubscribe();\n            subscription = obsQuery.resubscribeAfterError(onNext, onError);\n\n            if (!hasOwnProperty.call(error, \"graphQLErrors\")) {\n              // The error is not a GraphQL error\n              throw error;\n            }\n\n            const previousResult = this.result;\n            if (\n              !previousResult ||\n              (previousResult && previousResult.loading) ||\n              !equal(error, previousResult.error)\n            ) {\n              this.setResult({\n                data: (previousResult && previousResult.data) as TData,\n                error: error as ApolloError,\n                loading: false,\n                networkStatus: NetworkStatus.error,\n              });\n            }\n          };\n\n          let subscription = obsQuery.subscribe(onNext, onError);\n\n          // Do the \"unsubscribe\" with a short delay.\n          // This way, an existing subscription can be reused without an additional\n          // request if \"unsubscribe\"  and \"resubscribe\" to the same ObservableQuery\n          // happen in very fast succession.\n          return () => {\n            setTimeout(() => subscription.unsubscribe());\n            this.forceUpdate = () => this.forceUpdateState();\n          };\n        },\n        [\n          // We memoize the subscribe function using useCallback and the following\n          // dependency keys, because the subscribe function reference is all that\n          // useSyncExternalStore uses internally as a dependency key for the\n          // useEffect ultimately responsible for the subscription, so we are\n          // effectively passing this dependency array to that useEffect buried\n          // inside useSyncExternalStore, as desired.\n          obsQuery,\n          this.renderPromises,\n          this.client.disableNetworkFetches,\n        ]\n      ),\n\n      () => this.getCurrentResult(),\n      () => this.getCurrentResult()\n    );\n\n    // TODO Remove this method when we remove support for options.partialRefetch.\n    this.unsafeHandlePartialRefetch(result);\n\n    return this.toQueryResult(result);\n  }\n\n  // These members (except for renderPromises) are all populated by the\n  // useOptions method, which is called unconditionally at the beginning of the\n  // useQuery method, so we can safely use these members in other/later methods\n  // without worrying they might be uninitialized.\n  private renderPromises: ApolloContextValue[\"renderPromises\"];\n  private queryHookOptions!: QueryHookOptions<TData, TVariables>;\n  private watchQueryOptions!: WatchQueryOptions<TVariables, TData>;\n\n  private useOptions(options: QueryHookOptions<TData, TVariables>) {\n    const watchQueryOptions = this.createWatchQueryOptions(\n      (this.queryHookOptions = options)\n    );\n\n    // Update this.watchQueryOptions, but only when they have changed, which\n    // allows us to depend on the referential stability of\n    // this.watchQueryOptions elsewhere.\n    const currentWatchQueryOptions = this.watchQueryOptions;\n\n    if (!equal(watchQueryOptions, currentWatchQueryOptions)) {\n      this.watchQueryOptions = watchQueryOptions;\n\n      if (currentWatchQueryOptions && this.observable) {\n        // Though it might be tempting to postpone this reobserve call to the\n        // useEffect block, we need getCurrentResult to return an appropriate\n        // loading:true result synchronously (later within the same call to\n        // useQuery). Since we already have this.observable here (not true for\n        // the very first call to useQuery), we are not initiating any new\n        // subscriptions, though it does feel less than ideal that reobserve\n        // (potentially) kicks off a network request (for example, when the\n        // variables have changed), which is technically a side-effect.\n        this.observable.reobserve(this.getObsQueryOptions());\n\n        // Make sure getCurrentResult returns a fresh ApolloQueryResult<TData>,\n        // but save the current data as this.previousData, just like setResult\n        // usually does.\n        this.previousData = this.result?.data || this.previousData;\n        this.result = void 0;\n      }\n    }\n\n    // Make sure state.onCompleted and state.onError always reflect the latest\n    // options.onCompleted and options.onError callbacks provided to useQuery,\n    // since those functions are often recreated every time useQuery is called.\n    // Like the forceUpdate method, the versions of these methods inherited from\n    // InternalState.prototype are empty no-ops, but we can override them on the\n    // base state object (without modifying the prototype).\n    this.onCompleted =\n      options.onCompleted || InternalState.prototype.onCompleted;\n    this.onError = options.onError || InternalState.prototype.onError;\n\n    if (\n      (this.renderPromises || this.client.disableNetworkFetches) &&\n      this.queryHookOptions.ssr === false &&\n      !this.queryHookOptions.skip\n    ) {\n      // If SSR has been explicitly disabled, and this function has been called\n      // on the server side, return the default loading state.\n      this.result = this.ssrDisabledResult;\n    } else if (\n      this.queryHookOptions.skip ||\n      this.watchQueryOptions.fetchPolicy === \"standby\"\n    ) {\n      // When skipping a query (ie. we're not querying for data but still want to\n      // render children), make sure the `data` is cleared out and `loading` is\n      // set to `false` (since we aren't loading anything).\n      //\n      // NOTE: We no longer think this is the correct behavior. Skipping should\n      // not automatically set `data` to `undefined`, but instead leave the\n      // previous data in place. In other words, skipping should not mandate that\n      // previously received data is all of a sudden removed. Unfortunately,\n      // changing this is breaking, so we'll have to wait until Apollo Client 4.0\n      // to address this.\n      this.result = this.skipStandbyResult;\n    } else if (\n      this.result === this.ssrDisabledResult ||\n      this.result === this.skipStandbyResult\n    ) {\n      this.result = void 0;\n    }\n  }\n\n  private getObsQueryOptions(): WatchQueryOptions<TVariables, TData> {\n    const toMerge: Array<Partial<WatchQueryOptions<TVariables, TData>>> = [];\n\n    const globalDefaults = this.client.defaultOptions.watchQuery;\n    if (globalDefaults) toMerge.push(globalDefaults);\n\n    if (this.queryHookOptions.defaultOptions) {\n      toMerge.push(this.queryHookOptions.defaultOptions);\n    }\n\n    // We use compact rather than mergeOptions for this part of the merge,\n    // because we want watchQueryOptions.variables (if defined) to replace\n    // this.observable.options.variables whole. This replacement allows\n    // removing variables by removing them from the variables input to\n    // useQuery. If the variables were always merged together (rather than\n    // replaced), there would be no way to remove existing variables.\n    // However, the variables from options.defaultOptions and globalDefaults\n    // (if provided) should be merged, to ensure individual defaulted\n    // variables always have values, if not otherwise defined in\n    // observable.options or watchQueryOptions.\n    toMerge.push(\n      compact(\n        this.observable && this.observable.options,\n        this.watchQueryOptions\n      )\n    );\n\n    return toMerge.reduce(mergeOptions) as WatchQueryOptions<TVariables, TData>;\n  }\n\n  private ssrDisabledResult = maybeDeepFreeze({\n    loading: true,\n    data: void 0 as unknown as TData,\n    error: void 0,\n    networkStatus: NetworkStatus.loading,\n  });\n\n  private skipStandbyResult = maybeDeepFreeze({\n    loading: false,\n    data: void 0 as unknown as TData,\n    error: void 0,\n    networkStatus: NetworkStatus.ready,\n  });\n\n  // A function to massage options before passing them to ObservableQuery.\n  private createWatchQueryOptions({\n    skip,\n    ssr,\n    onCompleted,\n    onError,\n    defaultOptions,\n    // The above options are useQuery-specific, so this ...otherOptions spread\n    // makes otherOptions almost a WatchQueryOptions object, except for the\n    // query property that we add below.\n    ...otherOptions\n  }: QueryHookOptions<TData, TVariables> = {}): WatchQueryOptions<\n    TVariables,\n    TData\n  > {\n    // This Object.assign is safe because otherOptions is a fresh ...rest object\n    // that did not exist until just now, so modifications are still allowed.\n    const watchQueryOptions: WatchQueryOptions<TVariables, TData> =\n      Object.assign(otherOptions, { query: this.query });\n\n    if (\n      this.renderPromises &&\n      (watchQueryOptions.fetchPolicy === \"network-only\" ||\n        watchQueryOptions.fetchPolicy === \"cache-and-network\")\n    ) {\n      // this behavior was added to react-apollo without explanation in this PR\n      // https://github.com/apollographql/react-apollo/pull/1579\n      watchQueryOptions.fetchPolicy = \"cache-first\";\n    }\n\n    if (!watchQueryOptions.variables) {\n      watchQueryOptions.variables = {} as TVariables;\n    }\n\n    if (skip) {\n      const {\n        fetchPolicy = this.getDefaultFetchPolicy(),\n        initialFetchPolicy = fetchPolicy,\n      } = watchQueryOptions;\n\n      // When skipping, we set watchQueryOptions.fetchPolicy initially to\n      // \"standby\", but we also need/want to preserve the initial non-standby\n      // fetchPolicy that would have been used if not skipping.\n      Object.assign(watchQueryOptions, {\n        initialFetchPolicy,\n        fetchPolicy: \"standby\",\n      });\n    } else if (!watchQueryOptions.fetchPolicy) {\n      watchQueryOptions.fetchPolicy =\n        this.observable?.options.initialFetchPolicy ||\n        this.getDefaultFetchPolicy();\n    }\n\n    return watchQueryOptions;\n  }\n\n  getDefaultFetchPolicy(): WatchQueryFetchPolicy {\n    return (\n      this.queryHookOptions.defaultOptions?.fetchPolicy ||\n      this.client.defaultOptions.watchQuery?.fetchPolicy ||\n      \"cache-first\"\n    );\n  }\n\n  // Defining these methods as no-ops on the prototype allows us to call\n  // state.onCompleted and/or state.onError without worrying about whether a\n  // callback was provided.\n  private onCompleted(data: TData) {}\n  private onError(error: ApolloError) {}\n\n  private observable!: ObservableQuery<TData, TVariables>;\n  private obsQueryFields!: Omit<\n    ObservableQueryFields<TData, TVariables>,\n    \"variables\"\n  >;\n\n  private useObservableQuery() {\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    const obsQuery = (this.observable =\n      (this.renderPromises &&\n        this.renderPromises.getSSRObservable(this.watchQueryOptions)) ||\n      this.observable || // Reuse this.observable if possible (and not SSR)\n      this.client.watchQuery(this.getObsQueryOptions()));\n\n    this.obsQueryFields = React.useMemo(\n      () => ({\n        refetch: obsQuery.refetch.bind(obsQuery),\n        reobserve: obsQuery.reobserve.bind(obsQuery),\n        fetchMore: obsQuery.fetchMore.bind(obsQuery),\n        updateQuery: obsQuery.updateQuery.bind(obsQuery),\n        startPolling: obsQuery.startPolling.bind(obsQuery),\n        stopPolling: obsQuery.stopPolling.bind(obsQuery),\n        subscribeToMore: obsQuery.subscribeToMore.bind(obsQuery),\n      }),\n      [obsQuery]\n    );\n\n    const ssrAllowed = !(\n      this.queryHookOptions.ssr === false || this.queryHookOptions.skip\n    );\n\n    if (this.renderPromises && ssrAllowed) {\n      this.renderPromises.registerSSRObservable(obsQuery);\n\n      if (obsQuery.getCurrentResult().loading) {\n        // TODO: This is a legacy API which could probably be cleaned up\n        this.renderPromises.addObservableQueryPromise(obsQuery);\n      }\n    }\n\n    return obsQuery;\n  }\n\n  // These members are populated by getCurrentResult and setResult, and it's\n  // okay/normal for them to be initially undefined.\n  private result: undefined | ApolloQueryResult<TData>;\n  private previousData: undefined | TData;\n\n  private setResult(nextResult: ApolloQueryResult<TData>) {\n    const previousResult = this.result;\n    if (previousResult && previousResult.data) {\n      this.previousData = previousResult.data;\n    }\n    this.result = nextResult;\n    // Calling state.setResult always triggers an update, though some call sites\n    // perform additional equality checks before committing to an update.\n    this.forceUpdate();\n    this.handleErrorOrCompleted(nextResult, previousResult);\n  }\n\n  private handleErrorOrCompleted(\n    result: ApolloQueryResult<TData>,\n    previousResult?: ApolloQueryResult<TData>\n  ) {\n    if (!result.loading) {\n      const error = this.toApolloError(result);\n\n      // wait a tick in case we are in the middle of rendering a component\n      Promise.resolve()\n        .then(() => {\n          if (error) {\n            this.onError(error);\n          } else if (\n            result.data &&\n            previousResult?.networkStatus !== result.networkStatus &&\n            result.networkStatus === NetworkStatus.ready\n          ) {\n            this.onCompleted(result.data);\n          }\n        })\n        .catch((error) => {\n          invariant.warn(error);\n        });\n    }\n  }\n\n  private toApolloError(\n    result: ApolloQueryResult<TData>\n  ): ApolloError | undefined {\n    return isNonEmptyArray(result.errors) ?\n        new ApolloError({ graphQLErrors: result.errors })\n      : result.error;\n  }\n\n  private getCurrentResult(): ApolloQueryResult<TData> {\n    // Using this.result as a cache ensures getCurrentResult continues returning\n    // the same (===) result object, unless state.setResult has been called, or\n    // we're doing server rendering and therefore override the result below.\n    if (!this.result) {\n      this.handleErrorOrCompleted(\n        (this.result = this.observable.getCurrentResult())\n      );\n    }\n    return this.result;\n  }\n\n  // This cache allows the referential stability of this.result (as returned by\n  // getCurrentResult) to translate into referential stability of the resulting\n  // QueryResult object returned by toQueryResult.\n  private toQueryResultCache = new (canUseWeakMap ? WeakMap : Map)<\n    ApolloQueryResult<TData>,\n    QueryResult<TData, TVariables>\n  >();\n\n  toQueryResult(\n    result: ApolloQueryResult<TData>\n  ): QueryResult<TData, TVariables> {\n    let queryResult = this.toQueryResultCache.get(result);\n    if (queryResult) return queryResult;\n\n    const { data, partial, ...resultWithoutPartial } = result;\n    this.toQueryResultCache.set(\n      result,\n      (queryResult = {\n        data, // Ensure always defined, even if result.data is missing.\n        ...resultWithoutPartial,\n        ...this.obsQueryFields,\n        client: this.client,\n        observable: this.observable,\n        variables: this.observable.variables,\n        called: !this.queryHookOptions.skip,\n        previousData: this.previousData,\n      })\n    );\n\n    if (!queryResult.error && isNonEmptyArray(result.errors)) {\n      // Until a set naming convention for networkError and graphQLErrors is\n      // decided upon, we map errors (graphQLErrors) to the error options.\n      // TODO: Is it possible for both result.error and result.errors to be\n      // defined here?\n      queryResult.error = new ApolloError({ graphQLErrors: result.errors });\n    }\n\n    return queryResult;\n  }\n\n  private unsafeHandlePartialRefetch(result: ApolloQueryResult<TData>) {\n    // WARNING: SIDE-EFFECTS IN THE RENDER FUNCTION\n    //\n    // TODO: This code should be removed when the partialRefetch option is\n    // removed. I was unable to get this hook to behave reasonably in certain\n    // edge cases when this block was put in an effect.\n    if (\n      result.partial &&\n      this.queryHookOptions.partialRefetch &&\n      !result.loading &&\n      (!result.data || Object.keys(result.data).length === 0) &&\n      this.observable.options.fetchPolicy !== \"cache-only\"\n    ) {\n      Object.assign(result, {\n        loading: true,\n        networkStatus: NetworkStatus.refetch,\n      });\n      this.observable.refetch();\n    }\n  }\n}\n"],"names":["invariant","condition","message","Boolean","Error","LineRegExp","getLocation","source","position","lastLineStart","line","match","body","matchAll","index","length","column","printSourceLocation","sourceLocation","firstLineColumnOffset","locationOffset","padStart","lineIndex","lineOffset","lineNum","columnOffset","columnNum","locationStr","concat","name","lines","split","locationLine","subLineIndex","Math","floor","subLineColumnNum","subLines","i","push","slice","printPrefixedLines","map","subLine","existingLines","filter","_ref","_","undefined","padLen","max","_ref2","prefix","_ref3","join","GraphQLError","constructor","_this$nodes","_nodeLocations$","_len","arguments","rawArgs","Array","_key","nodes","positions","path","originalError","extensions","args","firstArg","toNormalizedOptions","super","this","undefinedIfEmpty","isArray","nodeLocations","node","loc","start","locations","pos","originalExtensions","value","Object","create","defineProperties","writable","enumerable","stack","defineProperty","configurable","captureStackTrace","Symbol","toStringTag","toString","output","location","toJSON","formattedError","keys","array","syntaxError","description","DirectiveLocation","TokenKind","Lexer","startOfFileToken","Token","SOF","lastToken","token","lineStart","advance","lookahead","kind","EOF","next","nextToken","readNextToken","end","prev","COMMENT","isUnicodeScalarValue","code","isSupplementaryCodePoint","isLeadingSurrogate","charCodeAt","isTrailingSurrogate","printCodePointAt","lexer","codePointAt","char","String","fromCodePoint","toUpperCase","createToken","col","bodyLength","readComment","BANG","DOLLAR","AMP","PAREN_L","PAREN_R","SPREAD","COLON","EQUALS","AT","BRACKET_L","BRACKET_R","BRACE_L","PIPE","BRACE_R","readBlockString","readString","isDigit","readNumber","isNameStart","readName","firstCode","isFloat","readDigits","FLOAT","INT","chunkStart","STRING","escape","readEscapedUnicodeVariableWidth","readEscapedUnicodeFixedWidth","readEscapedCharacter","size","point","readHexDigit","read16BitHexCode","trailingCode","currentLine","blockLines","BLOCK_STRING","dedentBlockStringLines","isNameContinue","NAME","instanceOf","globalThis","process","env","NODE_ENV","_value$constructor","className","prototype","stringifiedValue","inspect","Source","devAssert","Parser","options","sourceObj","isSource","_lexer","_options","_tokenCounter","parseName","expectToken","Kind","parseDocument","DOCUMENT","definitions","many","parseDefinition","peek","parseOperationDefinition","hasDescription","peekDescription","keywordToken","parseSchemaDefinition","parseScalarTypeDefinition","parseObjectTypeDefinition","parseInterfaceTypeDefinition","parseUnionTypeDefinition","parseEnumTypeDefinition","parseInputObjectTypeDefinition","parseDirectiveDefinition","parseFragmentDefinition","parseTypeSystemExtension","unexpected","OPERATION_DEFINITION","operation","OperationTypeNode","QUERY","variableDefinitions","directives","selectionSet","parseSelectionSet","parseOperationType","parseVariableDefinitions","parseDirectives","operationToken","MUTATION","SUBSCRIPTION","optionalMany","parseVariableDefinition","VARIABLE_DEFINITION","variable","parseVariable","type","parseTypeReference","defaultValue","expectOptionalToken","parseConstValueLiteral","parseConstDirectives","VARIABLE","SELECTION_SET","selections","parseSelection","parseFragment","parseField","nameOrAlias","alias","FIELD","parseArguments","isConst","item","parseConstArgument","parseArgument","ARGUMENT","parseValueLiteral","hasTypeCondition","expectOptionalKeyword","FRAGMENT_SPREAD","parseFragmentName","INLINE_FRAGMENT","typeCondition","parseNamedType","expectKeyword","allowLegacyFragmentVariables","FRAGMENT_DEFINITION","parseList","parseObject","advanceLexer","parseStringLiteral","BOOLEAN","NULL","ENUM","varName","block","LIST","values","any","OBJECT","fields","parseObjectField","OBJECT_FIELD","parseDirective","DIRECTIVE","innerType","LIST_TYPE","NON_NULL_TYPE","NAMED_TYPE","parseDescription","operationTypes","parseOperationTypeDefinition","SCHEMA_DEFINITION","OPERATION_TYPE_DEFINITION","SCALAR_TYPE_DEFINITION","interfaces","parseImplementsInterfaces","parseFieldsDefinition","OBJECT_TYPE_DEFINITION","delimitedMany","parseFieldDefinition","parseArgumentDefs","FIELD_DEFINITION","parseInputValueDef","INPUT_VALUE_DEFINITION","INTERFACE_TYPE_DEFINITION","types","parseUnionMemberTypes","UNION_TYPE_DEFINITION","parseEnumValuesDefinition","ENUM_TYPE_DEFINITION","parseEnumValueDefinition","parseEnumValueName","ENUM_VALUE_DEFINITION","getTokenDesc","parseInputFieldsDefinition","INPUT_OBJECT_TYPE_DEFINITION","parseSchemaExtension","parseScalarTypeExtension","parseObjectTypeExtension","parseInterfaceTypeExtension","parseUnionTypeExtension","parseEnumTypeExtension","parseInputObjectTypeExtension","SCHEMA_EXTENSION","SCALAR_TYPE_EXTENSION","OBJECT_TYPE_EXTENSION","INTERFACE_TYPE_EXTENSION","UNION_TYPE_EXTENSION","ENUM_TYPE_EXTENSION","INPUT_OBJECT_TYPE_EXTENSION","repeatable","parseDirectiveLocations","DIRECTIVE_DEFINITION","parseDirectiveLocation","hasOwnProperty","call","startToken","noLocation","Location","getTokenKindDesc","atToken","openKind","parseFn","closeKind","delimiterKind","maxTokens","isPunctuatorTokenKind","docCache","Map","fragmentSourceMap","printFragmentWarnings","experimentalFragmentVariables","normalize","string","replace","trim","processFragments","ast","seenKeys","Set","forEach","fragmentDefinition","fragmentName","sourceKey","substring","sourceKeySet","get","has","console","warn","set","add","__assign","cacheKey","parsed","parse","doc","workSet","key","endToken","stripLoc","gql","literals","_i","result","arg","gql_1","extras","clear","resetCaches","disableFragmentWarnings","enableExperimentalFragmentVariables","disableExperimentalFragmentVariables","didWarnUncachedGetSnapshot","useSyncExternalStore","React","subscribe","getSnapshot","getServerSnapshot","__DEV__","error","_a","inst","forceUpdate","canUseLayoutEffect","assign","checkIfSnapshotChanged","_b","DocumentType","cache","operationName","Query","Mutation","Subscription","parser","document","AutoCleanedWeakCache","cacheSizes","variables","cached","fragments","queries","mutations","subscriptions","x","definition","payload","useApolloClient","override","context","getApolloContext","client","resetCache","registerGlobalCache","wrapperSymbol","for","useQuery","query","hookName","useHook","clientOrObsQuery","queryManager","wrappers","wrapper","wrapHook","_useQuery","stateRef","current","InternalState","state","forceUpdateState","tick","useInternalState","previous","_this","ssrDisabledResult","maybeDeepFreeze","loading","data","networkStatus","NetworkStatus","skipStandbyResult","ready","toQueryResultCache","canUseWeakMap","WeakMap","requiredOperationName","usedOperationName","verifyDocumentType","previousResult","previousData","executeQuery","watchQueryOptions","createWatchQueryOptions","queryHookOptions","concast","observable","reobserveAsConcast","getObsQueryOptions","Promise","resolve","toQueryResult","getCurrentResult","complete","renderPromises","useOptions","obsQuery","useObservableQuery","handleStoreChange","onNext","equal","setResult","onError","subscription","unsubscribe","resubscribeAfterError","setTimeout","disableNetworkFetches","unsafeHandlePartialRefetch","currentWatchQueryOptions","reobserve","onCompleted","ssr","skip","fetchPolicy","toMerge","globalDefaults","defaultOptions","watchQuery","compact","reduce","mergeOptions","otherOptions","__rest","_c","getDefaultFetchPolicy","_d","initialFetchPolicy","getSSRObservable","obsQueryFields","refetch","bind","fetchMore","updateQuery","startPolling","stopPolling","subscribeToMore","ssrAllowed","registerSSRObservable","addObservableQueryPromise","nextResult","handleErrorOrCompleted","error_1","toApolloError","then","catch","isNonEmptyArray","errors","ApolloError","graphQLErrors","queryResult","resultWithoutPartial","partial","called","partialRefetch"],"sourceRoot":""}